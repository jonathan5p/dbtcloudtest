[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.archive_file.source_code: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.lambda_resources.module.lambda_config_loader.data.archive_file.source_code: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.archive_file.source_code: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.archive_file.source_code: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.archive_file.source_code: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.archive_file.source_code: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.archive_file.source_code: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.archive_file.source_code: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.archive_file.source_code: Read complete after 0s [id=926660d10bd1652c2fe809eda81cf74635786886][0m
[0m[1mmodule.mainprocess.module.lambda_resources.module.lambda_config_loader.data.archive_file.source_code: Read complete after 0s [id=77eb83dc9ddb3241f2726f887247d6a0244db3ae][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.archive_file.source_code: Read complete after 0s [id=a8aaa64bd82f056b02da164a585ab9421d1db900][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.archive_file.source_code: Read complete after 0s [id=de6a60cd016249f45646b022e035310112bc986e][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.archive_file.source_code: Read complete after 0s [id=27bce310b38c5fff989c1c71ff8526439a8f834e][0m
[0m[1mmodule.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.archive_file.source_code: Read complete after 0s [id=0dc7bb8024275b8fa92517a95ceeffef921f81b2][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.archive_file.source_code: Read complete after 0s [id=786fd2b616b58781daf8dfac51971f630bede209][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.archive_file.source_code: Read complete after 0s [id=6dc1aefc9aac2d13744813521ff38689732212e6][0m
[0m[1mmodule.alayasync.module.step_functions.module.alaya_sync_sfn.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.ingest_job.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.aurora_conn_password: Reading...[0m[0m
[0m[1mmodule.alayasync.module.step_functions.module.alaya_sync_sfn.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.aws_iam_policy_document.assume: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.aws_iam_policy_document.assume: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.aws_iam_policy_document.assume: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.mainprocess.module.lambda_resources.module.lambda_config_loader.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.ecs.module.ecs_alaya_sync.data.aws_iam_policy_document.ecs_task_execution_role: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.lambda_resources.module.lambda_config_loader.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.alayasync.module.ecs.module.ecs_alaya_sync.data.aws_iam_policy_document.ecs_task_execution_role: Read complete after 0s [id=1077804475][0m
[0m[1mmodule.alayasync.module.sqs.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.aws_iam_policy_document.assume: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.aws_iam_policy_document.assume: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.geo_job.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.aurora_db.data.aws_ssm_parameter.aurora_vpc_id: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.alayasync.module.ecs.module.ecs_alaya_sync.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.ecs.module.ecs_alaya_sync.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.cleaning_job.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.cleaning_job.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.lambda_resources.module.lambda_config_loader.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.lambda_resources.module.lambda_config_loader.data.aws_iam_policy_document.assume: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.alayasync.module.sqs.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.sqs.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_subnetid: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.aurora_db.data.aws_ssm_parameter.aurora_vpc_id: Read complete after 1s [id=/parameter/aue1/d1/oidh/aurora/vpcid][0m
[0m[1mmodule.mainprocess.module.aurora_db.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.aurora_db.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.aws_iam_policy_document.assume: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.aurora_conn_password: Read complete after 1s [id=/secure/aue1/d1/oidh/aurora/password][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.aws_iam_policy_document.assume: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.alayasync.module.step_functions.module.alaya_sync_sfn.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.bright_pypi_pipconf: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_subnetid: Read complete after 1s [id=/parameter/aue1/d1/oidh/redshift/subnetid][0m
[0m[1mmodule.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_username: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.bright_pypi_pipconf: Read complete after 0s [id=/secure/aue1/c1/codebuild/bright_pypi_pipconf][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.geo_job.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.geo_job.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.cleaning_job.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_username: Read complete after 0s [id=/secure/aue1/d1/oidh/redshift/username][0m
[0m[1mmodule.alayasync.module.ecs.module.ecs_alaya_sync.data.aws_iam_policy_document.assume_ecs_task: Reading...[0m[0m
[0m[1mmodule.alayasync.module.ecs.module.ecs_alaya_sync.data.aws_iam_policy_document.assume_ecs_task: Read complete after 0s [id=3720419576][0m
[0m[1mmodule.mainprocess.module.stepfunction.module.stepfunction.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.stepfunction.module.stepfunction.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mdata.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.aurora_conn_username: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.aurora_conn_username: Read complete after 0s [id=/secure/aue1/d1/oidh/aurora/username][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_jdbc_url: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_jdbc_url: Read complete after 0s [id=/parameter/aue1/d1/oidh/redshift/jdbc_url][0m
[0m[1mmodule.alayasync.module.ecs.module.ecs_alaya_sync.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.aws_caller_identity.current: Read complete after 2s [id=497607366324][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.ecs.module.ecs_alaya_sync.data.aws_caller_identity.current: Read complete after 1s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.ind_dedup_job.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.aws_caller_identity.current: Read complete after 2s [id=497607366324][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 2s [id=497607366324][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_ssm_parameter.ecs_cluster_name: Reading...[0m[0m
[0m[1mmodule.alayasync.module.sqs.data.aws_caller_identity.current: Read complete after 2s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.ingest_job.data.aws_caller_identity.current: Read complete after 2s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.org_dedup_job.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_password: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.aws_caller_identity.current: Read complete after 2s [id=497607366324][0m
[0m[1mmodule.alayasync.module.step_functions.module.alaya_sync_sfn.data.aws_caller_identity.current: Read complete after 1s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.cleaning_job.data.aws_caller_identity.current: Read complete after 1s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.geo_job.data.aws_caller_identity.current: Read complete after 2s [id=497607366324][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.org_dedup_job.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.lambda_resources.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.org_dedup_job.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.lambda_resources.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.ingest_job.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.lambda_resources.module.lambda_config_loader.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.ingest_job.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.ds_clean_library_version: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.aws_caller_identity.current: Read complete after 0s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_securitygroupid: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.aws_caller_identity.current: Read complete after 0s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.ind_dedup_job.data.aws_caller_identity.current: Read complete after 0s [id=497607366324][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.stepfunction.module.stepfunction.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.ind_dedup_job.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.ind_dedup_job.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.aws_caller_identity.current: Read complete after 0s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.org_dedup_job.data.aws_caller_identity.current: Read complete after 0s [id=497607366324][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.aws_caller_identity.current: Read complete after 0s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.lambda_resources.module.lambda_config_loader.data.aws_caller_identity.current: Read complete after 0s [id=497607366324][0m
[0m[1mmodule.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.aurora_db.data.aws_subnets.db_subnets: Reading...[0m[0m
[0m[1mdata.aws_ssm_parameter.ecs_cluster_name: Read complete after 0s [id=/parameter/aue1/d1/data/ecs_cluster][0m
[0m[1mmodule.alayasync.module.step_functions.module.alaya_sync_sfn.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.alayasync.module.step_functions.module.alaya_sync_sfn.data.aws_iam_policy_document.assume: Read complete after 0s [id=1650989459][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.redshift_connection.data.aws_subnet.connection_subnet: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.ds_clean_library_version: Read complete after 0s [id=/parameter/aue1/d1/codebuild/bright_clean_version][0m
[0m[1mmodule.data_key.data.aws_iam_policy_document.key_policy: Reading...[0m[0m
[0m[1mmodule.glue_enc_key.data.aws_iam_policy_document.key_policy: Reading...[0m[0m
[0m[1mmodule.data_key.data.aws_iam_policy_document.key_policy: Read complete after 0s [id=1595119451][0m
[0m[1mmodule.glue_enc_key.data.aws_iam_policy_document.key_policy: Read complete after 0s [id=2150466793][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_password: Read complete after 0s [id=/secure/aue1/d1/oidh/redshift/password][0m
[0m[1mmodule.mainprocess.module.stepfunction.module.stepfunction.data.aws_caller_identity.current: Read complete after 0s [id=497607366324][0m
[0m[1mmodule.mainprocess.module.stepfunction.module.stepfunction.data.aws_iam_policy_document.assume: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.stepfunction.module.stepfunction.data.aws_iam_policy_document.assume: Read complete after 0s [id=1650989459][0m
[0m[1mmodule.mainprocess.module.glue_resources.data.aws_ssm_parameter.redshift_conn_securitygroupid: Read complete after 0s [id=/parameter/aue1/d1/oidh/redshift/securitygroupid][0m
[0m[1mmodule.mainprocess.module.aurora_db.data.aws_subnets.db_subnets: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.redshift_connection.data.aws_subnet.connection_subnet: Read complete after 0s[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.geosvc_connection.data.aws_subnet.connection_subnet: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.aurora_connection.data.aws_subnet.connection_subnet: Reading...[0m[0m
[0m[1mmodule.mainprocess.module.glue_resources.module.geosvc_connection.data.aws_subnet.connection_subnet: Read complete after 0s [id=subnet-0d27b3488255277ea][0m
[0m[1mmodule.mainprocess.module.glue_resources.module.aurora_connection.data.aws_subnet.connection_subnet: Read complete after 0s [id=subnet-0faa149c05e010222][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_s3_object.artifacts["config/ingest_config.json"][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "artifacts" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "f22c8b7713f3b0d9ed593578bfaa7d52"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "config/ingest_config.json"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/artifacts/config/ingest_config.json"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # aws_ssm_parameter.max_records_param[0m will be created
[0m  [32m+[0m[0m resource "aws_ssm_parameter" "max_records_param" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m data_type      = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m insecure_value = (known after apply)
      [32m+[0m[0m key_id         = (known after apply)
      [32m+[0m[0m name           = "/parameter/aue1/d1/oidh/alayasync/max_records"
      [32m+[0m[0m tags_all       = (known after apply)
      [32m+[0m[0m tier           = (known after apply)
      [32m+[0m[0m type           = "String"
      [32m+[0m[0m value          = (sensitive value)
      [32m+[0m[0m version        = (known after apply)
    }

[1m  # module.alayasync.aws_cloudwatch_metric_alarm.register[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "register" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_description                     = "Monitors Failed registration processes for AlayaSync"
      [32m+[0m[0m alarm_name                            = "aue1d1z1cwaoidhoidh-alayasyncregister"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "QueueName" = "aue1d1z1sqsoidhoidh-alayasyncregisterdlq"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "ApproximateNumberOfMessagesVisible"
      [32m+[0m[0m namespace                             = "AWS/SQS"
      [32m+[0m[0m period                                = 60
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwaoidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwaoidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m threshold                             = 0
      [32m+[0m[0m treat_missing_data                    = "ignore"
    }

[1m  # module.alayasync.aws_cloudwatch_metric_alarm.sfn[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "sfn" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_description                     = "Monitors failed executions for AlayaSync step function"
      [32m+[0m[0m alarm_name                            = "aue1d1z1cwaoidhoidh-alayasync"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "ExecutionsFailed"
      [32m+[0m[0m namespace                             = "AWS/States"
      [32m+[0m[0m period                                = 60
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwaoidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwaoidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m threshold                             = 0
      [32m+[0m[0m treat_missing_data                    = "ignore"
    }

[1m  # module.alayasync.aws_lambda_event_source_mapping.register[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_event_source_mapping" "register" {
      [32m+[0m[0m batch_size                    = 1
      [32m+[0m[0m enabled                       = true
      [32m+[0m[0m event_source_arn              = (known after apply)
      [32m+[0m[0m function_arn                  = (known after apply)
      [32m+[0m[0m function_name                 = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m last_modified                 = (known after apply)
      [32m+[0m[0m last_processing_result        = (known after apply)
      [32m+[0m[0m maximum_record_age_in_seconds = (known after apply)
      [32m+[0m[0m maximum_retry_attempts        = (known after apply)
      [32m+[0m[0m parallelization_factor        = (known after apply)
      [32m+[0m[0m state                         = (known after apply)
      [32m+[0m[0m state_transition_reason       = (known after apply)
      [32m+[0m[0m uuid                          = (known after apply)
    }

[1m  # module.alayasync.aws_lambda_permission.allow_events[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_events" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "s3.amazonaws.com"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = "AllowExecutionFromS3BucketToLambda"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # module.alayasync.aws_s3_bucket_notification.register[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_notification" "register" {
      [32m+[0m[0m bucket      = (known after apply)
      [32m+[0m[0m eventbridge = false
      [32m+[0m[0m id          = (known after apply)

      [32m+[0m[0m lambda_function {
          [32m+[0m[0m events              = [
              [32m+[0m[0m "s3:ObjectCreated:*",
            ]
          [32m+[0m[0m filter_prefix       = "consume_data/resultData/executions/"
          [32m+[0m[0m filter_suffix       = ".json"
          [32m+[0m[0m id                  = (known after apply)
          [32m+[0m[0m lambda_function_arn = (known after apply)
        }

      [32m+[0m[0m queue {
          [32m+[0m[0m events        = [
              [32m+[0m[0m "s3:ObjectCreated:*",
              [32m+[0m[0m "s3:ObjectRemoved:*",
            ]
          [32m+[0m[0m filter_prefix = (known after apply)
          [32m+[0m[0m filter_suffix = ".parquet"
          [32m+[0m[0m id            = (known after apply)
          [32m+[0m[0m queue_arn     = (known after apply)
        }
      [32m+[0m[0m queue {
          [32m+[0m[0m events        = [
              [32m+[0m[0m "s3:ObjectCreated:*",
              [32m+[0m[0m "s3:ObjectRemoved:*",
            ]
          [32m+[0m[0m filter_prefix = (known after apply)
          [32m+[0m[0m filter_suffix = ".parquet"
          [32m+[0m[0m id            = (known after apply)
          [32m+[0m[0m queue_arn     = (known after apply)
        }
    }

[1m  # module.athena.aws_athena_workgroup.workgroup[0m will be created
[0m  [32m+[0m[0m resource "aws_athena_workgroup" "workgroup" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m force_destroy = false
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "aue1d1z1atwoidhoidh"
      [32m+[0m[0m state         = "ENABLED"
      [32m+[0m[0m tags          = {
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all      = {
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }

      [32m+[0m[0m configuration {
          [32m+[0m[0m enforce_workgroup_configuration    = true
          [32m+[0m[0m publish_cloudwatch_metrics_enabled = true
          [32m+[0m[0m requester_pays_enabled             = false

          [32m+[0m[0m result_configuration {
              [32m+[0m[0m output_location = (known after apply)

              [32m+[0m[0m encryption_configuration {
                  [32m+[0m[0m encryption_option = "SSE_S3"
                }
            }
        }
    }

[1m  # module.data_key.aws_kms_alias.key_alias[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "key_alias" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/aue1d1z1kmaoidhoidh-datakey"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.data_key.aws_kms_key.kms_key[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "kms_key" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "KMS key used for data encryption of all the data in the datahub-dedup process"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "kms:*"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::497607366324:root",
                              [32m+[0m[0m "arn:aws:iam::497607366324:role/aue1q1z1irodevopsqueryeadmin",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "admins"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::497607366324:root",
                              [32m+[0m[0m "arn:aws:iam::497607366324:role/databricks-workspace-stack-access-data-buckets",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "users"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = [
                              [32m+[0m[0m "logs.amazonaws.com",
                              [32m+[0m[0m "lambda.amazonaws.com",
                              [32m+[0m[0m "glue.amazonaws.com",
                              [32m+[0m[0m "athena.amazonaws.com",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "services"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "s3.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "s3"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name"         = "aue1d1z1kmaoidhoidh-datakey"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-datakey"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1kmaoidhoidh-datakey"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-datakey"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.glue_enc_key.aws_kms_alias.key_alias[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "key_alias" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/aue1d1z1kmaoidhoidh-glueenckey"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.glue_enc_key.aws_kms_key.kms_key[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "kms_key" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "KMS key used for data encryption of all the glue resources used in the datahub-dedup process"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "kms:*"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::497607366324:root",
                              [32m+[0m[0m "arn:aws:iam::497607366324:role/aue1q1z1irodevopsqueryeadmin",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "admins"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "arn:aws:iam::497607366324:root"
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "users"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = [
                              [32m+[0m[0m "logs.amazonaws.com",
                              [32m+[0m[0m "lambda.amazonaws.com",
                              [32m+[0m[0m "glue.amazonaws.com",
                              [32m+[0m[0m "athena.amazonaws.com",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "services"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "s3.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "s3"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name"         = "aue1d1z1kmaoidhoidh-glueenckey"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-glueenckey"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1kmaoidhoidh-glueenckey"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-glueenckey"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.mainprocess.aws_ecr_repository.addgeoinfo[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "addgeoinfo" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "aue1d1z1ecroidhoidh-addgeoinfo"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name"         = "aue1d1z1ecroidhoidh-addgeoinfo"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-addgeoinfo"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name"         = "aue1d1z1ecroidhoidh-addgeoinfo"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-addgeoinfo"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.mainprocess.aws_ssm_parameter.repository_url[0m will be created
[0m  [32m+[0m[0m resource "aws_ssm_parameter" "repository_url" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m data_type      = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m insecure_value = (known after apply)
      [32m+[0m[0m key_id         = (known after apply)
      [32m+[0m[0m name           = "/parameter/aue1/d1/oidh/ecr_addgeoinfo_repository_url"
      [32m+[0m[0m tags_all       = (known after apply)
      [32m+[0m[0m tier           = (known after apply)
      [32m+[0m[0m type           = "String"
      [32m+[0m[0m value          = (sensitive value)
      [32m+[0m[0m version        = (known after apply)
    }

[1m  # module.mainprocess.aws_vpc_security_group_egress_rule.glue_sg_egress[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_egress_rule" "glue_sg_egress" {
      [32m+[0m[0m arn                          = (known after apply)
      [32m+[0m[0m from_port                    = 0
      [32m+[0m[0m id                           = (known after apply)
      [32m+[0m[0m ip_protocol                  = "tcp"
      [32m+[0m[0m referenced_security_group_id = (known after apply)
      [32m+[0m[0m security_group_id            = (known after apply)
      [32m+[0m[0m security_group_rule_id       = (known after apply)
      [32m+[0m[0m tags_all                     = {}
      [32m+[0m[0m to_port                      = 65535
    }

[1m  # module.mainprocess.aws_vpc_security_group_ingress_rule.aurora_sg_ingress[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_ingress_rule" "aurora_sg_ingress" {
      [32m+[0m[0m arn                          = (known after apply)
      [32m+[0m[0m from_port                    = 5432
      [32m+[0m[0m id                           = (known after apply)
      [32m+[0m[0m ip_protocol                  = "tcp"
      [32m+[0m[0m referenced_security_group_id = (known after apply)
      [32m+[0m[0m security_group_id            = (known after apply)
      [32m+[0m[0m security_group_rule_id       = (known after apply)
      [32m+[0m[0m tags_all                     = {}
      [32m+[0m[0m to_port                      = 5432
    }

[1m  # module.s3_artifacts_bucket.data.aws_iam_policy_document.security_policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "security_policy" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:PutObject",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ForAnyValue:StringNotEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m variable = "s3:x-amz-server-side-encryption-aws-kms-key-id"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "*"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "Bool"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "false",
                ]
              [32m+[0m[0m variable = "aws:SecureTransport"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "*"
            }
        }
    }

[1m  # module.s3_artifacts_bucket.aws_s3_bucket.s3_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "s3_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "aue1d1z1s3boidhoidh-artifacts"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Name"         = "aue1d1z1s3boidhoidh-artifacts"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-artifacts"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Name"         = "aue1d1z1s3boidhoidh-artifacts"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-artifacts"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.s3_artifacts_bucket.aws_s3_bucket_lifecycle_configuration.bucket_lifecycle[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "bucket_lifecycle" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "bucket_lifecycle"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 180
              [32m+[0m[0m expired_object_delete_marker = (known after apply)
            }

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 30
              [32m+[0m[0m storage_class = "INTELLIGENT_TIERING"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "tmp"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 15
              [32m+[0m[0m expired_object_delete_marker = (known after apply)
            }

          [32m+[0m[0m filter {
              [32m+[0m[0m prefix = "tmp/"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "versions_config"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 90
            }

          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 30
              [32m+[0m[0m storage_class   = "STANDARD_IA"
            }
          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 60
              [32m+[0m[0m storage_class   = "GLACIER"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "tmp_versions"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m filter {
              [32m+[0m[0m prefix = "tmp/"
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 15
            }
        }
    }

[1m  # module.s3_artifacts_bucket.aws_s3_bucket_ownership_controls.s3_ownership[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_ownership_controls" "s3_ownership" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m object_ownership = "BucketOwnerEnforced"
        }
    }

[1m  # module.s3_artifacts_bucket.aws_s3_bucket_policy.security_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "security_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.s3_artifacts_bucket.aws_s3_bucket_server_side_encryption_configuration.s3_encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "s3_encryption" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.s3_artifacts_bucket.aws_s3_bucket_versioning.s3_bucket_versioning[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "s3_bucket_versioning" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.s3_data_bucket.data.aws_iam_policy_document.security_policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "security_policy" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:PutObject",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ForAnyValue:StringNotEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m variable = "s3:x-amz-server-side-encryption-aws-kms-key-id"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "*"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "Bool"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "false",
                ]
              [32m+[0m[0m variable = "aws:SecureTransport"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "*"
            }
        }
    }

[1m  # module.s3_data_bucket.aws_s3_bucket.s3_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "s3_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "aue1d1z1s3boidhoidh-datastorage"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Name"         = "aue1d1z1s3boidhoidh-datastorage"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-datastorage"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Name"         = "aue1d1z1s3boidhoidh-datastorage"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-datastorage"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.s3_data_bucket.aws_s3_bucket_lifecycle_configuration.bucket_lifecycle[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "bucket_lifecycle" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "bucket_lifecycle"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 180
              [32m+[0m[0m expired_object_delete_marker = (known after apply)
            }

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 30
              [32m+[0m[0m storage_class = "INTELLIGENT_TIERING"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "tmp"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 15
              [32m+[0m[0m expired_object_delete_marker = (known after apply)
            }

          [32m+[0m[0m filter {
              [32m+[0m[0m prefix = "tmp/"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "versions_config"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 90
            }

          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 30
              [32m+[0m[0m storage_class   = "STANDARD_IA"
            }
          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 60
              [32m+[0m[0m storage_class   = "GLACIER"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "tmp_versions"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m filter {
              [32m+[0m[0m prefix = "tmp/"
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 15
            }
        }
    }

[1m  # module.s3_data_bucket.aws_s3_bucket_ownership_controls.s3_ownership[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_ownership_controls" "s3_ownership" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m object_ownership = "BucketOwnerEnforced"
        }
    }

[1m  # module.s3_data_bucket.aws_s3_bucket_policy.security_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "security_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.s3_data_bucket.aws_s3_bucket_server_side_encryption_configuration.s3_encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "s3_encryption" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.s3_data_bucket.aws_s3_bucket_versioning.s3_bucket_versioning[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "s3_bucket_versioning" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.s3_glue_artifacts_bucket.data.aws_iam_policy_document.security_policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "security_policy" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:PutObject",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ForAnyValue:StringNotEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m variable = "s3:x-amz-server-side-encryption-aws-kms-key-id"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "*"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "Bool"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "false",
                ]
              [32m+[0m[0m variable = "aws:SecureTransport"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "*"
            }
        }
    }

[1m  # module.s3_glue_artifacts_bucket.aws_s3_bucket.s3_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "s3_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "aue1d1z1s3boidhoidh-glueartifacts"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Name"         = "aue1d1z1s3boidhoidh-glueartifacts"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-glueartifacts"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Name"         = "aue1d1z1s3boidhoidh-glueartifacts"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-glueartifacts"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.s3_glue_artifacts_bucket.aws_s3_bucket_lifecycle_configuration.bucket_lifecycle[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "bucket_lifecycle" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "bucket_lifecycle"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 180
              [32m+[0m[0m expired_object_delete_marker = (known after apply)
            }

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 30
              [32m+[0m[0m storage_class = "INTELLIGENT_TIERING"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "tmp"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 15
              [32m+[0m[0m expired_object_delete_marker = (known after apply)
            }

          [32m+[0m[0m filter {
              [32m+[0m[0m prefix = "tmp/"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "versions_config"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 90
            }

          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 30
              [32m+[0m[0m storage_class   = "STANDARD_IA"
            }
          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 60
              [32m+[0m[0m storage_class   = "GLACIER"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "tmp_versions"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m filter {
              [32m+[0m[0m prefix = "tmp/"
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 15
            }
        }
    }

[1m  # module.s3_glue_artifacts_bucket.aws_s3_bucket_ownership_controls.s3_ownership[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_ownership_controls" "s3_ownership" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m object_ownership = "BucketOwnerEnforced"
        }
    }

[1m  # module.s3_glue_artifacts_bucket.aws_s3_bucket_policy.security_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "security_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.s3_glue_artifacts_bucket.aws_s3_bucket_server_side_encryption_configuration.s3_encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "s3_encryption" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.s3_glue_artifacts_bucket.aws_s3_bucket_versioning.s3_bucket_versioning[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "s3_bucket_versioning" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.alayasync.module.dynamo.aws_dynamodb_table.metadata[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "metadata" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "aue1d1z1dytoidhoidh-alayasync"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_enabled   = true
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = "NEW_AND_OLD_IMAGES"
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name"         = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name"         = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "batch"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "id"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "status"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "batch"
          [32m+[0m[0m name               = "scheduling-index"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "ALL"
          [32m+[0m[0m range_key          = "status"
        }

      [32m+[0m[0m server_side_encryption {
          [32m+[0m[0m enabled     = true
          [32m+[0m[0m kms_key_arn = (known after apply)
        }

      [32m+[0m[0m ttl {
          [32m+[0m[0m attribute_name = "ttl"
          [32m+[0m[0m enabled        = true
        }
    }

[1m  # module.alayasync.module.sqs.data.aws_iam_policy_document.sqs_register[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "sqs_register" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sqs:ReceiveMessage",
              [32m+[0m[0m "sqs:SendMessage",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ArnLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m variable = "aws:SourceArn"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "497607366324",
                ]
              [32m+[0m[0m variable = "aws:SourceAccount"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "s3.amazonaws.com",
                ]
              [32m+[0m[0m type        = "Service"
            }
        }
    }

[1m  # module.alayasync.module.sqs.aws_sqs_queue.register[0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue" "register" {
      [32m+[0m[0m arn                               = (known after apply)
      [32m+[0m[0m content_based_deduplication       = false
      [32m+[0m[0m deduplication_scope               = (known after apply)
      [32m+[0m[0m delay_seconds                     = 0
      [32m+[0m[0m fifo_queue                        = false
      [32m+[0m[0m fifo_throughput_limit             = (known after apply)
      [32m+[0m[0m id                                = (known after apply)
      [32m+[0m[0m kms_data_key_reuse_period_seconds = (known after apply)
      [32m+[0m[0m kms_master_key_id                 = (known after apply)
      [32m+[0m[0m max_message_size                  = 262144
      [32m+[0m[0m message_retention_seconds         = 345600
      [32m+[0m[0m name                              = "aue1d1z1sqsoidhoidh-alayasyncregister"
      [32m+[0m[0m name_prefix                       = (known after apply)
      [32m+[0m[0m policy                            = (known after apply)
      [32m+[0m[0m receive_wait_time_seconds         = 0
      [32m+[0m[0m redrive_allow_policy              = (known after apply)
      [32m+[0m[0m redrive_policy                    = (known after apply)
      [32m+[0m[0m sqs_managed_sse_enabled           = (known after apply)
      [32m+[0m[0m tags                              = {
          [32m+[0m[0m "Name"         = "aue1d1z1sqsoidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                          = {
          [32m+[0m[0m "Name"         = "aue1d1z1sqsoidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m url                               = (known after apply)
      [32m+[0m[0m visibility_timeout_seconds        = 60
    }

[1m  # module.alayasync.module.sqs.aws_sqs_queue.register_dlq[0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue" "register_dlq" {
      [32m+[0m[0m arn                               = (known after apply)
      [32m+[0m[0m content_based_deduplication       = false
      [32m+[0m[0m deduplication_scope               = (known after apply)
      [32m+[0m[0m delay_seconds                     = 0
      [32m+[0m[0m fifo_queue                        = false
      [32m+[0m[0m fifo_throughput_limit             = (known after apply)
      [32m+[0m[0m id                                = (known after apply)
      [32m+[0m[0m kms_data_key_reuse_period_seconds = (known after apply)
      [32m+[0m[0m kms_master_key_id                 = (known after apply)
      [32m+[0m[0m max_message_size                  = 262144
      [32m+[0m[0m message_retention_seconds         = 1209600
      [32m+[0m[0m name                              = "aue1d1z1sqsoidhoidh-alayasyncregisterdlq"
      [32m+[0m[0m name_prefix                       = (known after apply)
      [32m+[0m[0m policy                            = (known after apply)
      [32m+[0m[0m receive_wait_time_seconds         = 0
      [32m+[0m[0m redrive_allow_policy              = (known after apply)
      [32m+[0m[0m redrive_policy                    = (known after apply)
      [32m+[0m[0m sqs_managed_sse_enabled           = (known after apply)
      [32m+[0m[0m tags                              = {
          [32m+[0m[0m "Name"         = "aue1d1z1sqsoidhoidh-alayasyncregisterdlq"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregisterdlq"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                          = {
          [32m+[0m[0m "Name"         = "aue1d1z1sqsoidhoidh-alayasyncregisterdlq"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregisterdlq"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m url                               = (known after apply)
      [32m+[0m[0m visibility_timeout_seconds        = 60
    }

[1m  # module.alayasync.module.sqs.aws_sqs_queue_policy.register[0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue_policy" "register" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m policy    = (known after apply)
      [32m+[0m[0m queue_url = (known after apply)
    }

[1m  # module.athena.module.athena_bucket.aws_s3_bucket.main[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "main" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "aue1d1z1s3boidhoidh-athena"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Name"         = "aue1d1z1s3boidhoidh-athena"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-athena"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Name"         = "aue1d1z1s3boidhoidh-athena"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-athena"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.athena.module.athena_bucket.aws_s3_bucket_public_access_block.output[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "output" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.athena.module.athena_bucket.aws_s3_bucket_server_side_encryption_configuration.output[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "output" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm = "AES256"
            }
        }
    }

[1m  # module.mainprocess.module.aurora_db.aws_db_subnet_group.db_subnet_group[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "db_subnet_group" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "aue1d1z1rduoidhoidh-admintooldbsubnetgroup"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = [
          [32m+[0m[0m "subnet-0112c4c44ce9649c2",
          [32m+[0m[0m "subnet-0284d2023ea90fef2",
          [32m+[0m[0m "subnet-09404a72c97c17a7b",
          [32m+[0m[0m "subnet-0faa149c05e010222",
        ]
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Name"         = "aue1d1z1rduoidhoidh-admintooldbsubnetgroup"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-admintooldbsubnetgroup"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Name"         = "aue1d1z1rduoidhoidh-admintooldbsubnetgroup"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-admintooldbsubnetgroup"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.mainprocess.module.aurora_db.aws_rds_cluster.admintooldb[0m will be created
[0m  [32m+[0m[0m resource "aws_rds_cluster" "admintooldb" {
      [32m+[0m[0m allocated_storage               = (known after apply)
      [32m+[0m[0m apply_immediately               = (known after apply)
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m availability_zones              = (known after apply)
      [32m+[0m[0m backup_retention_period         = 30
      [32m+[0m[0m cluster_identifier              = "aue1d1z1rccoidhoidh-admintooldb"
      [32m+[0m[0m cluster_identifier_prefix       = (known after apply)
      [32m+[0m[0m cluster_members                 = (known after apply)
      [32m+[0m[0m cluster_resource_id             = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot           = true
      [32m+[0m[0m database_name                   = "dev"
      [32m+[0m[0m db_cluster_parameter_group_name = (known after apply)
      [32m+[0m[0m db_subnet_group_name            = (known after apply)
      [32m+[0m[0m deletion_protection             = true
      [32m+[0m[0m enable_global_write_forwarding  = false
      [32m+[0m[0m enable_http_endpoint            = false
      [32m+[0m[0m enabled_cloudwatch_logs_exports = [
          [32m+[0m[0m "postgresql",
        ]
      [32m+[0m[0m endpoint                        = (known after apply)
      [32m+[0m[0m engine                          = "aurora-postgresql"
      [32m+[0m[0m engine_mode                     = "provisioned"
      [32m+[0m[0m engine_version                  = "13.10"
      [32m+[0m[0m engine_version_actual           = (known after apply)
      [32m+[0m[0m final_snapshot_identifier       = "aue1d1z1rdnoidhoidh-admintooldbfinalsnapshot"
      [32m+[0m[0m hosted_zone_id                  = (known after apply)
      [32m+[0m[0m iam_roles                       = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m kms_key_id                      = (known after apply)
      [32m+[0m[0m manage_master_user_password     = true
      [32m+[0m[0m master_user_secret              = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id   = (known after apply)
      [32m+[0m[0m master_username                 = "postgres"
      [32m+[0m[0m network_type                    = (known after apply)
      [32m+[0m[0m port                            = (known after apply)
      [32m+[0m[0m preferred_backup_window         = "21:00-00:00"
      [32m+[0m[0m preferred_maintenance_window    = (known after apply)
      [32m+[0m[0m reader_endpoint                 = (known after apply)
      [32m+[0m[0m skip_final_snapshot             = false
      [32m+[0m[0m storage_encrypted               = true
      [32m+[0m[0m storage_type                    = (known after apply)
      [32m+[0m[0m tags                            = {
          [32m+[0m[0m "Name"         = "aue1d1z1rccoidhoidh-admintooldb"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-admintooldb"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                        = {
          [32m+[0m[0m "Name"         = "aue1d1z1rccoidhoidh-admintooldb"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-admintooldb"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m vpc_security_group_ids          = (known after apply)

      [32m+[0m[0m serverlessv2_scaling_configuration {
          [32m+[0m[0m max_capacity = 4
          [32m+[0m[0m min_capacity = 2
        }
    }

[1m  # module.mainprocess.module.aurora_db.aws_rds_cluster_instance.example[0m will be created
[0m  [32m+[0m[0m resource "aws_rds_cluster_instance" "example" {
      [32m+[0m[0m apply_immediately                     = (known after apply)
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = false
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m cluster_identifier                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_parameter_group_name               = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m dbi_resource_id                       = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "aurora-postgresql"
      [32m+[0m[0m engine_version                        = "13.10"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = (known after apply)
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.serverless"
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m performance_insights_enabled          = (known after apply)
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m preferred_backup_window               = (known after apply)
      [32m+[0m[0m preferred_maintenance_window          = (known after apply)
      [32m+[0m[0m promotion_tier                        = 0
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m storage_encrypted                     = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1rccoidhoidh-admintooldb"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-admintooldb"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Name"         = "aue1d1z1rccoidhoidh-admintooldb"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-admintooldb"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m writer                                = (known after apply)
    }

[1m  # module.mainprocess.module.aurora_db.aws_security_group.db_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "db_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "aue1d1z1sgpoidhoidh-admintooldbsecuritygroup"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"         = "aue1d1z1sgpoidhoidh-admintooldbsecuritygroup"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-admintooldbsecuritygroup"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"         = "aue1d1z1sgpoidhoidh-admintooldbsecuritygroup"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-admintooldbsecuritygroup"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m vpc_id                 = (sensitive value)
    }

[1m  # module.mainprocess.module.glue_resources.aws_glue_catalog_database.alayasync_process_glue_db[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_database" "alayasync_process_glue_db" {
      [32m+[0m[0m arn          = (known after apply)
      [32m+[0m[0m catalog_id   = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m location_uri = (known after apply)
      [32m+[0m[0m name         = "aue1d1z1gldoidhoidh_alayasync"
      [32m+[0m[0m tags         = {
          [32m+[0m[0m "Name"         = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh_alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all     = {
          [32m+[0m[0m "Name"         = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh_alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.mainprocess.module.glue_resources.aws_glue_catalog_database.dedup_process_glue_db[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_database" "dedup_process_glue_db" {
      [32m+[0m[0m arn          = (known after apply)
      [32m+[0m[0m catalog_id   = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m location_uri = (known after apply)
      [32m+[0m[0m name         = "aue1d1z1gldoidhoidh_oidhdb"
      [32m+[0m[0m tags         = {
          [32m+[0m[0m "Name"         = "aue1d1z1gldoidhoidh_oidhdb"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh_oidhdb"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all     = {
          [32m+[0m[0m "Name"         = "aue1d1z1gldoidhoidh_oidhdb"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh_oidhdb"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.mainprocess.module.glue_resources.aws_glue_security_configuration.glue_security_config[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_security_configuration" "glue_security_config" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m name = "aue1d1z1glsoidhoidh-securityconfig"

      [32m+[0m[0m encryption_configuration {
          [32m+[0m[0m cloudwatch_encryption {
              [32m+[0m[0m cloudwatch_encryption_mode = "SSE-KMS"
              [32m+[0m[0m kms_key_arn                = (known after apply)
            }
          [32m+[0m[0m job_bookmarks_encryption {
              [32m+[0m[0m job_bookmarks_encryption_mode = "CSE-KMS"
              [32m+[0m[0m kms_key_arn                   = (known after apply)
            }
          [32m+[0m[0m s3_encryption {
              [32m+[0m[0m s3_encryption_mode = "SSE-S3"
            }
        }
    }

[1m  # module.mainprocess.module.glue_resources.aws_s3_object.glue_jars["delta-core_2.12-2.3.0.jar"][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "glue_jars" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = (known after apply)
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "jars/delta-core_2.12-2.3.0.jar"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/mainprocess/glue/jars/delta-core_2.12-2.3.0.jar"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.aws_s3_object.glue_jars["delta-storage-2.3.0.jar"][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "glue_jars" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = (known after apply)
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "jars/delta-storage-2.3.0.jar"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/mainprocess/glue/jars/delta-storage-2.3.0.jar"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.aws_s3_object.glue_jars["scala-udf-similarity-0.1.1_spark3.x.jar"][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "glue_jars" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = (known after apply)
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "jars/scala-udf-similarity-0.1.1_spark3.x.jar"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/mainprocess/glue/jars/scala-udf-similarity-0.1.1_spark3.x.jar"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.mainprocess.module.stepfunction.data.aws_iam_policy_document.cron_trigger_policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "cron_trigger_policy" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "states:StartExecution",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "stfexecaccess"
        }
    }

[1m  # module.mainprocess.module.stepfunction.aws_cloudwatch_event_rule.cron_trigger[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "cron_trigger" {
      [32m+[0m[0m arn                 = (known after apply)
      [32m+[0m[0m event_bus_name      = "default"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m is_enabled          = false
      [32m+[0m[0m name                = "aue1d1z1cwroidhoidh-etltrigger"
      [32m+[0m[0m name_prefix         = (known after apply)
      [32m+[0m[0m schedule_expression = "cron(0 23 * * ? *)"
      [32m+[0m[0m tags                = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwroidhoidh-etltrigger"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-etltrigger"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all            = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwroidhoidh-etltrigger"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-etltrigger"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.mainprocess.module.stepfunction.aws_cloudwatch_event_target.etl_sfn[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "etl_sfn" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m role_arn       = (known after apply)
      [32m+[0m[0m rule           = "aue1d1z1cwroidhoidh-etltrigger"
      [32m+[0m[0m target_id      = "StartStateMachine"
    }

[1m  # module.mainprocess.module.stepfunction.aws_iam_policy.cron_trigger_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cron_trigger_policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "IAM Policy for the EventBridge cron trigger of the dedupe process etl"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-etltrigger"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Name"         = "aue1d1z1iploidhoidh-etltrigger"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-etltrigger"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Name"         = "aue1d1z1iploidhoidh-etltrigger"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-etltrigger"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.mainprocess.module.stepfunction.aws_iam_role.crontrigger_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "crontrigger_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "events.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "CronTriggerAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-etltrigger"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-etltrigger"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-etltrigger"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-etltrigger"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-etltrigger"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.mainprocess.module.stepfunction.aws_iam_role_policy_attachment.cron_trigger_policy_attachement[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cron_trigger_policy_attachement" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-etltrigger"
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.data.template_file.ecs_task_container_definitions[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "ecs_task_container_definitions" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            [
              [32m+[0m[0m {
                  [32m+[0m[0m environment      = [
                      [32m+[0m[0m {
                          [32m+[0m[0m name  = "athena_bucket"
                          [32m+[0m[0m value = "${athena_bucket_id}"
                        },
                      [32m+[0m[0m {
                          [32m+[0m[0m name  = "oidh_table"
                          [32m+[0m[0m value = "${dynamo_table_register}"
                        },
                    ]
                  [32m+[0m[0m essential        = true
                  [32m+[0m[0m image            = "${task_image}:latest"
                  [32m+[0m[0m logConfiguration = {
                      [32m+[0m[0m logDriver = "awslogs"
                      [32m+[0m[0m options   = {
                          [32m+[0m[0m awslogs-group         = "${cloudwatch_log_group}"
                          [32m+[0m[0m awslogs-region        = "${region}"
                          [32m+[0m[0m awslogs-stream-prefix = "ecs"
                        }
                    }
                  [32m+[0m[0m name             = "oidh-push"
                },
            ]
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "cloudwatch_log_group"  = "/aws/ecs/aue1d1z1cwgoidhoidh-alayapush"
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "sfn_alaya_sync"        = (known after apply)
          [32m+[0m[0m "task_image"            = (known after apply)
        }
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.aws_cloudwatch_log_group.ecs_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "ecs_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/ecs/aue1d1z1cwgoidhoidh-alayapush"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayapush"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayapush"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayapush"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayapush"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.aws_ecr_repository.app_sync[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "app_sync" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "aue1d1z1ecroidhoidh-alayapush"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name"         = "aue1d1z1ecroidhoidh-alayapush"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayapush"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name"         = "aue1d1z1ecroidhoidh-alayapush"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayapush"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.aws_ecs_task_definition.ecs_task_definition[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_task_definition" "ecs_task_definition" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m arn_without_revision     = (known after apply)
      [32m+[0m[0m container_definitions    = (known after apply)
      [32m+[0m[0m cpu                      = "1024"
      [32m+[0m[0m execution_role_arn       = (known after apply)
      [32m+[0m[0m family                   = "aue1d1z1ectoidhoidh-alayapush"
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m memory                   = "2048"
      [32m+[0m[0m network_mode             = "awsvpc"
      [32m+[0m[0m requires_compatibilities = [
          [32m+[0m[0m "FARGATE",
        ]
      [32m+[0m[0m revision                 = (known after apply)
      [32m+[0m[0m skip_destroy             = false
      [32m+[0m[0m tags_all                 = (known after apply)
      [32m+[0m[0m task_role_arn            = (known after apply)
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.aws_iam_role.ecs_task[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_task" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = [
                              [32m+[0m[0m "ecs.amazonaws.com",
                              [32m+[0m[0m "ecs-tasks.amazonaws.com",
                            ]
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayapush"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayapush"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayapush"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayapush"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayapush"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.aws_iam_role.ecs_task_execution_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_task_execution_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = [
          [32m+[0m[0m "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
        ]
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayapush-execution"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayapush-execution"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayapush-execution"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayapush-execution"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayapush-execution"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.aws_ssm_parameter.repository_url[0m will be created
[0m  [32m+[0m[0m resource "aws_ssm_parameter" "repository_url" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m data_type      = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m insecure_value = (known after apply)
      [32m+[0m[0m key_id         = (known after apply)
      [32m+[0m[0m name           = "/parameter/aue1/d1/oidh/ecs_task_push_repository_url"
      [32m+[0m[0m tags_all       = (known after apply)
      [32m+[0m[0m tier           = (known after apply)
      [32m+[0m[0m type           = "String"
      [32m+[0m[0m value          = (sensitive value)
      [32m+[0m[0m version        = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws/lambda/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:DescribeTable",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:GetRecords",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}",
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:RunTask",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task-definition/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:DescribeTasks",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:PutObject*",
                          [32m+[0m[0m "s3:DeleteObject*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "iam:PassRole",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:iam::${account_id}:role/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "individuals"           = "bdmpindkey"
          [32m+[0m[0m "lambda_name"           = "aue1d1z1lmboidhoidh-alayasyncecsstart"
          [32m+[0m[0m "organizations"         = "bdmporgkey"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "task_definition"       = "aue1d1z1ectoidhoidh-alayapush"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.aws_cloudwatch_log_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/aue1d1z1lmboidhoidh-alayasyncecsstart"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncecsstart"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstart"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncecsstart"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstart"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayasyncecsstart"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayasyncecsstart"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncecsstart"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstart"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncecsstart"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstart"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.aws_iam_role_policy_attachment.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayasyncecsstart"
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_start.aws_lambda_function.executor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "executor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "alayasyncecsstart"
      [32m+[0m[0m filename                       = "../src/alayasync/lambda/alayasyncecsstart.zip"
      [32m+[0m[0m function_name                  = "aue1d1z1lmboidhoidh-alayasyncecsstart"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "VxtqxZbqBTL/6Xjb/A0vTyeZxfsy3m8okw4mHzy99UI="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncecsstart"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstart"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncecsstart"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstart"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "ECS_CLUSTER"     = (sensitive value)
              [32m+[0m[0m "ECS_SUBNETS"     = "subnet-0112c4c44ce9649c2"
              [32m+[0m[0m "INDIVIDUALS"     = "bdmpindkey"
              [32m+[0m[0m "OIDH_TABLE"      = "aue1d1z1dytoidhoidh-alayasync"
              [32m+[0m[0m "ORGANIZATIONS"   = "bdmporgkey"
              [32m+[0m[0m "TASK_DEFINITION" = "aue1d1z1ectoidhoidh-alayapush"
            }
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws/lambda/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:DescribeTable",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:GetRecords",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}",
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:RunTask",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task-definition/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:DescribeTasks",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:PutObject*",
                          [32m+[0m[0m "s3:DeleteObject*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "individuals"           = "bdmpindkey"
          [32m+[0m[0m "lambda_name"           = "aue1d1z1lmboidhoidh-alayasyncecsstatus"
          [32m+[0m[0m "organizations"         = "bdmporgkey"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "task_definition"       = "aue1d1z1ectoidhoidh-alayapush"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.aws_cloudwatch_log_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/aue1d1z1lmboidhoidh-alayasyncecsstatus"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncecsstatus"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstatus"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncecsstatus"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstatus"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayasyncecsstatus"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayasyncecsstatus"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncecsstatus"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstatus"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncecsstatus"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstatus"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.aws_iam_role_policy_attachment.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayasyncecsstatus"
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_ecs_status.aws_lambda_function.executor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "executor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "alayasyncecsstatus"
      [32m+[0m[0m filename                       = "../src/alayasync/lambda/alayasyncecsstatus.zip"
      [32m+[0m[0m function_name                  = "aue1d1z1lmboidhoidh-alayasyncecsstatus"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "okGodqLc2HO4Et3nYyAmNPbp9EvhEu1KPgpL9yXQyQA="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncecsstatus"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstatus"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncecsstatus"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncecsstatus"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "ECS_CLUSTER" = (sensitive value)
              [32m+[0m[0m "OIDH_TABLE"  = "aue1d1z1dytoidhoidh-alayasync"
            }
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_processing.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws/lambda/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:DeleteMessageBatch",
                          [32m+[0m[0m "sqs:GetQueueAttributes",
                          [32m+[0m[0m "sqs:GetQueueUrl",
                          [32m+[0m[0m "sqs:ListQueues",
                          [32m+[0m[0m "sqs:ListDeadLetterSourceQueues",
                          [32m+[0m[0m "sqs:ListQueueTags",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                          [32m+[0m[0m "sqs:SendMessage",
                          [32m+[0m[0m "sqs:SendMessageBatch",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:sqs:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:DescribeTable",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:GetRecords",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}",
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:RunTask",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task-definition/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:DescribeTasks",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:PutObject*",
                          [32m+[0m[0m "s3:DeleteObject*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "individuals"           = "bdmpindkey"
          [32m+[0m[0m "lambda_name"           = "aue1d1z1lmboidhoidh-alayasyncprocessing"
          [32m+[0m[0m "organizations"         = "bdmporgkey"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "task_definition"       = "aue1d1z1ectoidhoidh-alayapush"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_processing.aws_cloudwatch_log_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/aue1d1z1lmboidhoidh-alayasyncprocessing"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncprocessing"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncprocessing"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncprocessing"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncprocessing"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_processing.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayasyncprocessing"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_processing.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayasyncprocessing"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncprocessing"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncprocessing"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncprocessing"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncprocessing"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_processing.aws_iam_role_policy_attachment.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayasyncprocessing"
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_processing.aws_lambda_function.executor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "executor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "alayasyncprocessing"
      [32m+[0m[0m filename                       = "../src/alayasync/lambda/alayasyncprocessing.zip"
      [32m+[0m[0m function_name                  = "aue1d1z1lmboidhoidh-alayasyncprocessing"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "akvmTMtB4bT6mk6E4M9KnZUEcrWP7AUMATQ51SmYPMw="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncprocessing"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncprocessing"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncprocessing"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncprocessing"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "OIDH_TABLE" = "aue1d1z1dytoidhoidh-alayasync"
            }
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws/lambda/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:DeleteMessageBatch",
                          [32m+[0m[0m "sqs:GetQueueAttributes",
                          [32m+[0m[0m "sqs:GetQueueUrl",
                          [32m+[0m[0m "sqs:ListQueues",
                          [32m+[0m[0m "sqs:ListDeadLetterSourceQueues",
                          [32m+[0m[0m "sqs:ListQueueTags",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                          [32m+[0m[0m "sqs:SendMessage",
                          [32m+[0m[0m "sqs:SendMessageBatch",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:sqs:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:DescribeTable",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:GetRecords",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}",
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:RunTask",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task-definition/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:DescribeTasks",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:PutObject*",
                          [32m+[0m[0m "s3:DeleteObject*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "individuals"           = "bdmpindkey"
          [32m+[0m[0m "lambda_name"           = "aue1d1z1lmboidhoidh-alayasyncreduce"
          [32m+[0m[0m "organizations"         = "bdmporgkey"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "task_definition"       = "aue1d1z1ectoidhoidh-alayapush"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.aws_cloudwatch_log_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/aue1d1z1lmboidhoidh-alayasyncreduce"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncreduce"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncreduce"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncreduce"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncreduce"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayasyncreduce"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayasyncreduce"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncreduce"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncreduce"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncreduce"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncreduce"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.aws_iam_role_policy_attachment.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayasyncreduce"
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_reduce.aws_lambda_function.executor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "executor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "alayasyncreduce"
      [32m+[0m[0m filename                       = "../src/alayasync/lambda/alayasyncreduce.zip"
      [32m+[0m[0m function_name                  = "aue1d1z1lmboidhoidh-alayasyncreduce"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "gzkgJCGOh2vlJ3/Bg2QfPMiAzYuZt9QdScH/lCJ+mt0="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncreduce"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncreduce"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncreduce"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncreduce"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "OIDH_TABLE" = "aue1d1z1dytoidhoidh-alayasync"
            }
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_register.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws/lambda/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:DeleteMessageBatch",
                          [32m+[0m[0m "sqs:GetQueueAttributes",
                          [32m+[0m[0m "sqs:GetQueueUrl",
                          [32m+[0m[0m "sqs:ListQueues",
                          [32m+[0m[0m "sqs:ListDeadLetterSourceQueues",
                          [32m+[0m[0m "sqs:ListQueueTags",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                          [32m+[0m[0m "sqs:SendMessage",
                          [32m+[0m[0m "sqs:SendMessageBatch",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:sqs:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:DescribeTable",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:GetRecords",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}",
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:RunTask",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task-definition/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:DescribeTasks",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:PutObject*",
                          [32m+[0m[0m "s3:DeleteObject*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "individuals"           = "bdmpindkey"
          [32m+[0m[0m "lambda_name"           = "aue1d1z1lmboidhoidh-alayasyncregister"
          [32m+[0m[0m "organizations"         = "bdmporgkey"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "task_definition"       = "aue1d1z1ectoidhoidh-alayapush"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_register.aws_cloudwatch_log_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/aue1d1z1lmboidhoidh-alayasyncregister"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_register.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayasyncregister"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_register.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayasyncregister"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_register.aws_iam_role_policy_attachment.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayasyncregister"
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_register.aws_lambda_function.executor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "executor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "alayasyncregister"
      [32m+[0m[0m filename                       = "../src/alayasync/lambda/alayasyncregister.zip"
      [32m+[0m[0m function_name                  = "aue1d1z1lmboidhoidh-alayasyncregister"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "t2cYWCJUgplCklwME5h7U3TgQ9AZ+8hRQmTtP7EZrpw="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncregister"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncregister"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "OIDH_TABLE" = "aue1d1z1dytoidhoidh-alayasync"
            }
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws/lambda/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:DeleteMessageBatch",
                          [32m+[0m[0m "sqs:GetQueueAttributes",
                          [32m+[0m[0m "sqs:GetQueueUrl",
                          [32m+[0m[0m "sqs:ListQueues",
                          [32m+[0m[0m "sqs:ListDeadLetterSourceQueues",
                          [32m+[0m[0m "sqs:ListQueueTags",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                          [32m+[0m[0m "sqs:SendMessage",
                          [32m+[0m[0m "sqs:SendMessageBatch",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:sqs:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:DescribeTable",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:GetRecords",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}",
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:RunTask",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task-definition/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:DescribeTasks",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ecs:${region}:${account_id}:task/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:GetBucketAcl",
                          [32m+[0m[0m "s3:ListBucket",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectAcl",
                          [32m+[0m[0m "s3:DeleteObject",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/*",
                          [32m+[0m[0m "arn:aws:s3:::${athena_bucket_id}/*",
                          [32m+[0m[0m "arn:aws:s3:::${athena_bucket_id}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "athena:StartQueryExecution",
                          [32m+[0m[0m "athena:GetQueryExecution",
                          [32m+[0m[0m "athena:GetQueryResults",
                          [32m+[0m[0m "athena:GetQueryResultsStream",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:athena:${region}:${account_id}:workgroup/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetBucketLocation",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "glue:GetTable",
                          [32m+[0m[0m "glue:BatchCreatePartition",
                          [32m+[0m[0m "glue:UpdateTable",
                          [32m+[0m[0m "glue:CreateTable",
                          [32m+[0m[0m "glue:GetPartitions",
                          [32m+[0m[0m "glue:GetPartition",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:glue:${region}:${account_id}:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "individuals"           = "bdmpindkey"
          [32m+[0m[0m "lambda_name"           = "aue1d1z1lmboidhoidh-alayasyncschedule"
          [32m+[0m[0m "organizations"         = "bdmporgkey"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "task_definition"       = "aue1d1z1ectoidhoidh-alayapush"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.aws_cloudwatch_log_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/aue1d1z1lmboidhoidh-alayasyncschedule"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncschedule"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncschedule"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncschedule"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncschedule"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayasyncschedule"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayasyncschedule"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncschedule"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncschedule"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncschedule"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncschedule"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.aws_iam_role_policy_attachment.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayasyncschedule"
    }

[1m  # module.alayasync.module.lambdas.module.lambda_alaya_sync_scheduling.aws_lambda_function.executor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "executor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "alayasyncschedule"
      [32m+[0m[0m filename                       = "../src/alayasync/lambda/alayasyncschedule.zip"
      [32m+[0m[0m function_name                  = "aue1d1z1lmboidhoidh-alayasyncschedule"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = [
          [32m+[0m[0m "arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python310:4",
        ]
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.10"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "CEPVKwlT2SuM2hPXyR2J2taGNKUf6KlPdCfWiotiObk="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncschedule"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncschedule"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncschedule"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncschedule"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }
    }

[1m  # module.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws/lambda/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:DeleteMessageBatch",
                          [32m+[0m[0m "sqs:GetQueueAttributes",
                          [32m+[0m[0m "sqs:GetQueueUrl",
                          [32m+[0m[0m "sqs:ListQueues",
                          [32m+[0m[0m "sqs:ListDeadLetterSourceQueues",
                          [32m+[0m[0m "sqs:ListQueueTags",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                          [32m+[0m[0m "sqs:SendMessage",
                          [32m+[0m[0m "sqs:SendMessageBatch",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:sqs:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:DescribeTable",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:GetRecords",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}",
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "states:StartExecution",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${sfn_alaya_sync}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:PutObject*",
                          [32m+[0m[0m "s3:DeleteObject*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "lambda_name"           = "aue1d1z1lmboidhoidh-alayasyncexecution"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "sfn_alaya_sync"        = (known after apply)
        }
    }

[1m  # module.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.aws_cloudwatch_log_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/aue1d1z1lmboidhoidh-alayasyncexecution"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncexecution"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncexecution"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-alayasyncexecution"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncexecution"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayasyncexecution"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayasyncexecution"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncexecution"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncexecution"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasyncexecution"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncexecution"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.aws_iam_role_policy_attachment.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayasyncexecution"
    }

[1m  # module.alayasync.module.lambdas_execution.module.lambda_alaya_sync_execution.aws_lambda_function.executor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "executor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "alayasyncexecution"
      [32m+[0m[0m filename                       = "../src/alayasync/lambda_execution/alayasyncexecution.zip"
      [32m+[0m[0m function_name                  = "aue1d1z1lmboidhoidh-alayasyncexecution"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "Fza4te+ZhBUfbzJLyzNCeOea6wTw7edkPENEOTYihYg="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncexecution"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncexecution"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-alayasyncexecution"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasyncexecution"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }
    }

[1m  # module.alayasync.module.step_functions.module.alaya_sync_sfn.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "lambda:InvokeFunction",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${schedule_lambda}",
                          [32m+[0m[0m "${processing_lambda}",
                          [32m+[0m[0m "${reduce_lambda}",
                          [32m+[0m[0m "${ecs_start}",
                          [32m+[0m[0m "${ecs_status}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:GetBucketAcl",
                          [32m+[0m[0m "s3:ListBucket",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectAcl",
                          [32m+[0m[0m "s3:DeleteObject",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/consume_data/resultData",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/consume_data/resultData/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "states:StartExecution",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:states:${region}:${account_id}:stateMachine:${sfn_name}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_start"             = (known after apply)
          [32m+[0m[0m "ecs_status"            = (known after apply)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "processing_lambda"     = (known after apply)
          [32m+[0m[0m "reduce_lambda"         = (known after apply)
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "register_lambda"       = (known after apply)
          [32m+[0m[0m "schedule_lambda"       = (known after apply)
          [32m+[0m[0m "sfn_name"              = "aue1d1z1stmoidhoidh-alayasync"
        }
    }

[1m  # module.alayasync.module.step_functions.module.alaya_sync_sfn.data.template_file.sfn_definition[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "sfn_definition" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = <<-EOT
            {
              "Comment": "Using Map state in Distributed mode",
              "StartAt": "Parallel_Task",
              "States": {
                "Parallel_Task": {
                  "Type": "Parallel",
                  "Branches": [
                    {
                      "StartAt": "Scheduling",
                      "States": {
                        "Scheduling": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "OutputPath": "$.Payload",
                          "Parameters": {
                            "FunctionName": "${schedule_lambda}",
                            "Payload.$": "$"
                          },
                          "Next": "Process data"
                        },
                        "Process data": {
                          "Type": "Map",
                          "ToleratedFailurePercentage": 100,
                          "MaxConcurrency": ${concurrent_tasks},
                          "ItemProcessor": {
                            "ProcessorConfig": {
                              "Mode": "DISTRIBUTED",
                              "ExecutionType": "STANDARD"
                            },
                            "StartAt": "Main_Block",
                            "States": {
                              "Main_Block": {
                                "Type": "Parallel",
                                "Branches": [
                                  {
                                    "StartAt": "Start_Sending_to_Alaya",
                                    "States": {
                                      "Start_Sending_to_Alaya": {
                                        "Type": "Task",
                                        "Resource": "${ecs_start}",
                                        "ResultPath": "$.run_async_id",
                                        "Next": "Wait_Send"
                                      },
                                      "Wait_Send": {
                                        "Type": "Wait",
                                        "Seconds": 30,
                                        "Next": "Send_status"
                                      },
                                      "Send_status": {
                                        "Type": "Task",
                                        "Resource": "${ecs_status}",
                                        "ResultPath": "$.run_async_status",
                                        "Next": "Choice_status"
                                      },
                                      "Choice_status": {
                                        "Type": "Choice",
                                        "Choices": [
                                          {
                                            "Variable": "$.run_async_status.status",
                                            "StringEquals": "STOPPED",
                                            "Next": "SuccessBranch"
                                          },
                                          {
                                            "Variable": "$.run_async_status.status",
                                            "StringEquals": "FAILED",
                                            "Next": "FailBranch"
                                          },
                                          {
                                            "Variable": "$.run_async_status.status",
                                            "StringEquals": "TIMEOUT",
                                            "Next": "FailBranch"
                                          }
                                        ],
                                        "Default": "Wait_Send"
                                      },
                                      "SuccessBranch": {
                                        "Type": "Pass",
                                        "End": true
                                      },
                                      "FailBranch": {
                                        "Type": "Fail",
                                        "Cause": "Wrong_status_for_ECS_task",
                                        "Error": "ECS_Task_Failed"
                                      }
                                    }
                                  }
                                ],
                                "Catch": [
                                  {
                                    "ErrorEquals": [
                                      "States.ALL"
                                    ],
                                    "ResultPath": "$.error_info",
                                    "Next": "MapEndFail"
                                  }
                                ],
                                "Next": "MapEndSuccess"
                              },
                              "MapEndSuccess": {
                                "Type": "Pass",
                                "End": true
                              },
                              "MapEndFail": {
                                "Type": "Fail",
                                "ErrorPath": "$.error_info.Error",
                                "CausePath": "States.Format('Map Error {}', $.error_info.Cause)"
                              }
                            }
                          },
                          "Label": "Processdata",
                          "Next": "Gathering results",
                          "ResultWriter": {
                            "Resource": "arn:aws:states:::s3:putObject",
                            "Parameters": {
                              "Bucket": "${bucket_id}",
                              "Prefix": "consume_data/resultData/"
                            }
                          },
                          "ItemSelector": {
                            "index.$": "$$.Map.Item.Index",
                            "value.$": "$$.Map.Item.Value"
                          }
                        },
                        "Gathering results": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "OutputPath": "$.Payload",
                          "Parameters": {
                            "FunctionName": "${reduce_lambda}",
                            "Payload.$": "$"
                          },
                          "End": true
                        }
                      }
                    }
                  ],
                  "ResultPath": "$.Payload",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "ResultPath": "$.Payload",
                      "Next": "WorkflowEndFail"
                    }
                  ],
                  "Next": "WorkflowEnd"
                },
                "WorkflowEnd": {
                  "Type": "Pass",
                  "End": true
                },
                "WorkflowEndFail": {
                  "Type": "Fail",
                  "Error": "Step Functions Execution Error"
                }
              }
            }
        EOT
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_start"             = (known after apply)
          [32m+[0m[0m "ecs_status"            = (known after apply)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "processing_lambda"     = (known after apply)
          [32m+[0m[0m "reduce_lambda"         = (known after apply)
          [32m+[0m[0m "register_lambda"       = (known after apply)
          [32m+[0m[0m "schedule_lambda"       = (known after apply)
        }
    }

[1m  # module.alayasync.module.step_functions.module.alaya_sync_sfn.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayasync"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Name"         = "aue1d1z1iploidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Name"         = "aue1d1z1iploidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.alayasync.module.step_functions.module.alaya_sync_sfn.aws_iam_role.sfn[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "sfn" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:SourceAccount" = "497607366324"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "states.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-alayasync"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.alayasync.module.step_functions.module.alaya_sync_sfn.aws_iam_role_policy_attachment.sfn[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "sfn" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayasync"
    }

[1m  # module.alayasync.module.step_functions.module.alaya_sync_sfn.aws_sfn_state_machine.sfn[0m will be created
[0m  [32m+[0m[0m resource "aws_sfn_state_machine" "sfn" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m creation_date             = (known after apply)
      [32m+[0m[0m definition                = (known after apply)
      [32m+[0m[0m description               = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m name                      = "aue1d1z1stmoidhoidh-alayasync"
      [32m+[0m[0m name_prefix               = (known after apply)
      [32m+[0m[0m publish                   = false
      [32m+[0m[0m revision_id               = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m state_machine_version_arn = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Name"         = "aue1d1z1stmoidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1stmoidhoidh-alayasync"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-alayasync"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m type                      = "STANDARD"
      [32m+[0m[0m version_description       = (known after apply)
    }

[1m  # module.alayasync.module.tables.module.individuals.aws_glue_catalog_table.table_failed[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_table" "table_failed" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m catalog_id    = (known after apply)
      [32m+[0m[0m database_name = "aue1d1z1gldoidhoidh_alayasync"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "individuals_failed"
      [32m+[0m[0m parameters    = {
          [32m+[0m[0m "EXTERNAL"            = "TRUE"
          [32m+[0m[0m "parquet.compression" = "SNAPPY"
        }
      [32m+[0m[0m table_type    = "EXTERNAL_TABLE"

      [32m+[0m[0m partition_keys {
          [32m+[0m[0m name = "dt_utc"
          [32m+[0m[0m type = "string"
        }
      [32m+[0m[0m partition_keys {
          [32m+[0m[0m name = "source_file"
          [32m+[0m[0m type = "string"
        }

      [32m+[0m[0m storage_descriptor {
          [32m+[0m[0m input_format  = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat"
          [32m+[0m[0m location      = (known after apply)
          [32m+[0m[0m output_format = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat"

          [32m+[0m[0m columns {
              [32m+[0m[0m name = "bdmpindkey"
              [32m+[0m[0m type = "string"
            }
          [32m+[0m[0m columns {
              [32m+[0m[0m name = "status"
              [32m+[0m[0m type = "string"
            }

          [32m+[0m[0m ser_de_info {
              [32m+[0m[0m name                  = "base-stream"
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m "serialization.format" = "1"
                }
              [32m+[0m[0m serialization_library = "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
            }
        }
    }

[1m  # module.alayasync.module.tables.module.individuals.aws_glue_catalog_table.table_results[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_table" "table_results" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m catalog_id    = (known after apply)
      [32m+[0m[0m database_name = "aue1d1z1gldoidhoidh_alayasync"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "individuals_results"
      [32m+[0m[0m parameters    = {
          [32m+[0m[0m "EXTERNAL"            = "TRUE"
          [32m+[0m[0m "parquet.compression" = "SNAPPY"
        }
      [32m+[0m[0m table_type    = "EXTERNAL_TABLE"

      [32m+[0m[0m storage_descriptor {
          [32m+[0m[0m input_format  = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat"
          [32m+[0m[0m location      = (known after apply)
          [32m+[0m[0m output_format = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat"

          [32m+[0m[0m columns {
              [32m+[0m[0m name = "id"
              [32m+[0m[0m type = "string"
            }
          [32m+[0m[0m columns {
              [32m+[0m[0m name = "task_id"
              [32m+[0m[0m type = "string"
            }
          [32m+[0m[0m columns {
              [32m+[0m[0m name = "succeeded"
              [32m+[0m[0m type = "bigint"
            }
          [32m+[0m[0m columns {
              [32m+[0m[0m name = "failed"
              [32m+[0m[0m type = "bigint"
            }

          [32m+[0m[0m ser_de_info {
              [32m+[0m[0m name                  = "base-stream"
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m "serialization.format" = "1"
                }
              [32m+[0m[0m serialization_library = "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
            }
        }
    }

[1m  # module.alayasync.module.tables.module.individuals.aws_glue_catalog_table.table_succeeded[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_table" "table_succeeded" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m catalog_id    = (known after apply)
      [32m+[0m[0m database_name = "aue1d1z1gldoidhoidh_alayasync"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "individuals_succeeded"
      [32m+[0m[0m parameters    = {
          [32m+[0m[0m "EXTERNAL"            = "TRUE"
          [32m+[0m[0m "parquet.compression" = "SNAPPY"
        }
      [32m+[0m[0m table_type    = "EXTERNAL_TABLE"

      [32m+[0m[0m partition_keys {
          [32m+[0m[0m name = "dt_utc"
          [32m+[0m[0m type = "string"
        }
      [32m+[0m[0m partition_keys {
          [32m+[0m[0m name = "source_file"
          [32m+[0m[0m type = "string"
        }

      [32m+[0m[0m storage_descriptor {
          [32m+[0m[0m input_format  = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat"
          [32m+[0m[0m location      = (known after apply)
          [32m+[0m[0m output_format = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat"

          [32m+[0m[0m columns {
              [32m+[0m[0m name = "bdmpindkey"
              [32m+[0m[0m type = "string"
            }

          [32m+[0m[0m ser_de_info {
              [32m+[0m[0m name                  = "base-stream"
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m "serialization.format" = "1"
                }
              [32m+[0m[0m serialization_library = "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
            }
        }
    }

[1m  # module.alayasync.module.tables.module.organizations.aws_glue_catalog_table.table_failed[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_table" "table_failed" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m catalog_id    = (known after apply)
      [32m+[0m[0m database_name = "aue1d1z1gldoidhoidh_alayasync"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "organizations_failed"
      [32m+[0m[0m parameters    = {
          [32m+[0m[0m "EXTERNAL"            = "TRUE"
          [32m+[0m[0m "parquet.compression" = "SNAPPY"
        }
      [32m+[0m[0m table_type    = "EXTERNAL_TABLE"

      [32m+[0m[0m partition_keys {
          [32m+[0m[0m name = "dt_utc"
          [32m+[0m[0m type = "string"
        }
      [32m+[0m[0m partition_keys {
          [32m+[0m[0m name = "source_file"
          [32m+[0m[0m type = "string"
        }

      [32m+[0m[0m storage_descriptor {
          [32m+[0m[0m input_format  = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat"
          [32m+[0m[0m location      = (known after apply)
          [32m+[0m[0m output_format = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat"

          [32m+[0m[0m columns {
              [32m+[0m[0m name = "bdmporgkey"
              [32m+[0m[0m type = "string"
            }
          [32m+[0m[0m columns {
              [32m+[0m[0m name = "status"
              [32m+[0m[0m type = "string"
            }

          [32m+[0m[0m ser_de_info {
              [32m+[0m[0m name                  = "base-stream"
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m "serialization.format" = "1"
                }
              [32m+[0m[0m serialization_library = "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
            }
        }
    }

[1m  # module.alayasync.module.tables.module.organizations.aws_glue_catalog_table.table_results[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_table" "table_results" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m catalog_id    = (known after apply)
      [32m+[0m[0m database_name = "aue1d1z1gldoidhoidh_alayasync"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "organizations_results"
      [32m+[0m[0m parameters    = {
          [32m+[0m[0m "EXTERNAL"            = "TRUE"
          [32m+[0m[0m "parquet.compression" = "SNAPPY"
        }
      [32m+[0m[0m table_type    = "EXTERNAL_TABLE"

      [32m+[0m[0m storage_descriptor {
          [32m+[0m[0m input_format  = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat"
          [32m+[0m[0m location      = (known after apply)
          [32m+[0m[0m output_format = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat"

          [32m+[0m[0m columns {
              [32m+[0m[0m name = "id"
              [32m+[0m[0m type = "string"
            }
          [32m+[0m[0m columns {
              [32m+[0m[0m name = "task_id"
              [32m+[0m[0m type = "string"
            }
          [32m+[0m[0m columns {
              [32m+[0m[0m name = "succeeded"
              [32m+[0m[0m type = "bigint"
            }
          [32m+[0m[0m columns {
              [32m+[0m[0m name = "failed"
              [32m+[0m[0m type = "bigint"
            }

          [32m+[0m[0m ser_de_info {
              [32m+[0m[0m name                  = "base-stream"
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m "serialization.format" = "1"
                }
              [32m+[0m[0m serialization_library = "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
            }
        }
    }

[1m  # module.alayasync.module.tables.module.organizations.aws_glue_catalog_table.table_succeeded[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_catalog_table" "table_succeeded" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m catalog_id    = (known after apply)
      [32m+[0m[0m database_name = "aue1d1z1gldoidhoidh_alayasync"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "organizations_succeeded"
      [32m+[0m[0m parameters    = {
          [32m+[0m[0m "EXTERNAL"            = "TRUE"
          [32m+[0m[0m "parquet.compression" = "SNAPPY"
        }
      [32m+[0m[0m table_type    = "EXTERNAL_TABLE"

      [32m+[0m[0m partition_keys {
          [32m+[0m[0m name = "dt_utc"
          [32m+[0m[0m type = "string"
        }
      [32m+[0m[0m partition_keys {
          [32m+[0m[0m name = "source_file"
          [32m+[0m[0m type = "string"
        }

      [32m+[0m[0m storage_descriptor {
          [32m+[0m[0m input_format  = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat"
          [32m+[0m[0m location      = (known after apply)
          [32m+[0m[0m output_format = "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat"

          [32m+[0m[0m columns {
              [32m+[0m[0m name = "bdmporgkey"
              [32m+[0m[0m type = "string"
            }

          [32m+[0m[0m ser_de_info {
              [32m+[0m[0m name                  = "base-stream"
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m "serialization.format" = "1"
                }
              [32m+[0m[0m serialization_library = "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
            }
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.aurora_connection.aws_glue_connection.glue_connection[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_connection" "glue_connection" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m catalog_id            = (known after apply)
      [32m+[0m[0m connection_properties = (sensitive value)
      [32m+[0m[0m connection_type       = "JDBC"
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m name                  = "aue1d1z1glxoidhoidh-auroraconn"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1glxoidhoidh-auroraconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-auroraconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1glxoidhoidh-auroraconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-auroraconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }

      [32m+[0m[0m physical_connection_requirements {
          [32m+[0m[0m availability_zone      = "us-east-1c"
          [32m+[0m[0m security_group_id_list = (known after apply)
          [32m+[0m[0m subnet_id              = "subnet-0faa149c05e010222"
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.aurora_connection.aws_security_group.conn_sg[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "conn_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "aue1d1z1sgpoidhoidh-auroraconn"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"         = "aue1d1z1sgpoidhoidh-auroraconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-auroraconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"         = "aue1d1z1sgpoidhoidh-auroraconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-auroraconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0e2e0a002af0dfdbf"
    }

[1m  # module.mainprocess.module.glue_resources.module.aurora_connection.aws_vpc_security_group_egress_rule.glue_sg_egress[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_egress_rule" "glue_sg_egress" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m cidr_ipv4              = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_protocol            = "-1"
      [32m+[0m[0m security_group_id      = (known after apply)
      [32m+[0m[0m security_group_rule_id = (known after apply)
      [32m+[0m[0m tags_all               = {}
    }

[1m  # module.mainprocess.module.glue_resources.module.aurora_connection.aws_vpc_security_group_ingress_rule.glue_sg_ingress[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_ingress_rule" "glue_sg_ingress" {
      [32m+[0m[0m arn                          = (known after apply)
      [32m+[0m[0m id                           = (known after apply)
      [32m+[0m[0m ip_protocol                  = "-1"
      [32m+[0m[0m referenced_security_group_id = (known after apply)
      [32m+[0m[0m security_group_id            = (known after apply)
      [32m+[0m[0m security_group_rule_id       = (known after apply)
      [32m+[0m[0m tags_all                     = {}
    }

[1m  # module.mainprocess.module.glue_resources.module.cleaning_job.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Abort*",
                          [32m+[0m[0m "s3:DeleteObject*",
                          [32m+[0m[0m "s3:GetBucket*",
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:List*",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectLegalHold",
                          [32m+[0m[0m "s3:PutObjectRetention",
                          [32m+[0m[0m "s3:PutObjectTagging",
                          [32m+[0m[0m "s3:PutObjectVersionTagging",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_bucket_arn}",
                          [32m+[0m[0m "${data_bucket_arn}/*",
                          [32m+[0m[0m "${glue_bucket_arn}",
                          [32m+[0m[0m "${glue_bucket_arn}/*",
                          [32m+[0m[0m "${artifacts_bucket_arn}",
                          [32m+[0m[0m "${artifacts_bucket_arn}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                          [32m+[0m[0m "${glue_enc_key}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:AssociateKmsKey",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws-glue/jobs/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"                         = "497607366324"
          [32m+[0m[0m "alaya_trigger_key"                  = "consume_data/resultData/executions_1"
          [32m+[0m[0m "artifacts_bucket_arn"               = (known after apply)
          [32m+[0m[0m "artifacts_bucket_id"                = (known after apply)
          [32m+[0m[0m "aurora_backup_retention_period"     = "30"
          [32m+[0m[0m "aurora_jdbc_url"                    = (known after apply)
          [32m+[0m[0m "aurora_max_capacity"                = "4"
          [32m+[0m[0m "aurora_min_capacity"                = "2"
          [32m+[0m[0m "aurora_preferred_backup_window"     = "21:00-00:00"
          [32m+[0m[0m "aurora_subnetid"                    = "subnet-0faa149c05e010222"
          [32m+[0m[0m "cron_schedule"                      = "cron(0 23 * * ? *)"
          [32m+[0m[0m "cron_trigger_enabled"               = "false"
          [32m+[0m[0m "data_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "data_bucket_id"                     = (known after apply)
          [32m+[0m[0m "data_key_arn"                       = (known after apply)
          [32m+[0m[0m "glue_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "glue_bucket_id"                     = (known after apply)
          [32m+[0m[0m "glue_enc_key"                       = (known after apply)
          [32m+[0m[0m "glue_geosvc_subnetid"               = "subnet-0d27b3488255277ea"
          [32m+[0m[0m "lambda_ec_agent_source_table_name"  = "bright_raw_agent_latest"
          [32m+[0m[0m "lambda_ec_agent_target_table_name"  = "bright_staging_agent_latest"
          [32m+[0m[0m "lambda_ec_office_source_table_name" = "bright_raw_office_latest"
          [32m+[0m[0m "lambda_ec_office_target_table_name" = "bright_staging_office_latest"
          [32m+[0m[0m "max_records_per_file"               = "5000"
          [32m+[0m[0m "region"                             = "us-east-1"
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.cleaning_job.aws_glue_job.glue_job[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_job" "glue_job" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m connections            = []
      [32m+[0m[0m default_arguments      = (known after apply)
      [32m+[0m[0m glue_version           = "4.0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m max_capacity           = (known after apply)
      [32m+[0m[0m name                   = "aue1d1z1gljoidhoidh-cleaningjob"
      [32m+[0m[0m number_of_workers      = 10
      [32m+[0m[0m role_arn               = (known after apply)
      [32m+[0m[0m security_configuration = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-cleaningjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-cleaningjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-cleaningjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-cleaningjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                = 60
      [32m+[0m[0m worker_type            = "G.1X"

      [32m+[0m[0m command {
          [32m+[0m[0m name            = "glueetl"
          [32m+[0m[0m python_version  = (known after apply)
          [32m+[0m[0m script_location = (known after apply)
        }

      [32m+[0m[0m execution_property {
          [32m+[0m[0m max_concurrent_runs = 1
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.cleaning_job.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-cleaningjob"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.cleaning_job.aws_iam_role.glue_job_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "glue_job_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "glue.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "GlueAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-cleaningjob"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-cleaningjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-cleaningjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-cleaningjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-cleaningjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.cleaning_job.aws_iam_role_policy_attachment.glue[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-cleaningjob"
    }

[1m  # module.mainprocess.module.glue_resources.module.cleaning_job.aws_iam_role_policy_attachment.glue_service_policy_attachement[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue_service_policy_attachement" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-cleaningjob"
    }

[1m  # module.mainprocess.module.glue_resources.module.cleaning_job.aws_s3_object.glue_script[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "glue_script" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "b0633c092400371fe17a17b134394c73"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "scripts/cleaningjob.py"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/mainprocess/glue/cleaningjob/cleaningjob.py"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.geo_job.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Abort*",
                          [32m+[0m[0m "s3:DeleteObject*",
                          [32m+[0m[0m "s3:GetBucket*",
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:List*",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectLegalHold",
                          [32m+[0m[0m "s3:PutObjectRetention",
                          [32m+[0m[0m "s3:PutObjectTagging",
                          [32m+[0m[0m "s3:PutObjectVersionTagging",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_bucket_arn}",
                          [32m+[0m[0m "${data_bucket_arn}/*",
                          [32m+[0m[0m "${glue_bucket_arn}",
                          [32m+[0m[0m "${glue_bucket_arn}/*",
                          [32m+[0m[0m "${artifacts_bucket_arn}",
                          [32m+[0m[0m "${artifacts_bucket_arn}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                          [32m+[0m[0m "${glue_enc_key}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:AssociateKmsKey",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws-glue/jobs/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"                         = "497607366324"
          [32m+[0m[0m "alaya_trigger_key"                  = "consume_data/resultData/executions_1"
          [32m+[0m[0m "artifacts_bucket_arn"               = (known after apply)
          [32m+[0m[0m "artifacts_bucket_id"                = (known after apply)
          [32m+[0m[0m "aurora_backup_retention_period"     = "30"
          [32m+[0m[0m "aurora_jdbc_url"                    = (known after apply)
          [32m+[0m[0m "aurora_max_capacity"                = "4"
          [32m+[0m[0m "aurora_min_capacity"                = "2"
          [32m+[0m[0m "aurora_preferred_backup_window"     = "21:00-00:00"
          [32m+[0m[0m "aurora_subnetid"                    = "subnet-0faa149c05e010222"
          [32m+[0m[0m "cron_schedule"                      = "cron(0 23 * * ? *)"
          [32m+[0m[0m "cron_trigger_enabled"               = "false"
          [32m+[0m[0m "data_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "data_bucket_id"                     = (known after apply)
          [32m+[0m[0m "data_key_arn"                       = (known after apply)
          [32m+[0m[0m "glue_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "glue_bucket_id"                     = (known after apply)
          [32m+[0m[0m "glue_enc_key"                       = (known after apply)
          [32m+[0m[0m "glue_geosvc_subnetid"               = "subnet-0d27b3488255277ea"
          [32m+[0m[0m "lambda_ec_agent_source_table_name"  = "bright_raw_agent_latest"
          [32m+[0m[0m "lambda_ec_agent_target_table_name"  = "bright_staging_agent_latest"
          [32m+[0m[0m "lambda_ec_office_source_table_name" = "bright_raw_office_latest"
          [32m+[0m[0m "lambda_ec_office_target_table_name" = "bright_staging_office_latest"
          [32m+[0m[0m "max_records_per_file"               = "5000"
          [32m+[0m[0m "region"                             = "us-east-1"
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.geo_job.aws_glue_job.glue_job[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_job" "glue_job" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m connections            = [
          [32m+[0m[0m "aue1d1z1glxoidhoidh-geosvcconn",
        ]
      [32m+[0m[0m default_arguments      = (known after apply)
      [32m+[0m[0m glue_version           = "4.0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m max_capacity           = (known after apply)
      [32m+[0m[0m name                   = "aue1d1z1gljoidhoidh-getgeoinfojob"
      [32m+[0m[0m number_of_workers      = 5
      [32m+[0m[0m role_arn               = (known after apply)
      [32m+[0m[0m security_configuration = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-getgeoinfojob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-getgeoinfojob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-getgeoinfojob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-getgeoinfojob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                = 60
      [32m+[0m[0m worker_type            = "G.1X"

      [32m+[0m[0m command {
          [32m+[0m[0m name            = "glueetl"
          [32m+[0m[0m python_version  = (known after apply)
          [32m+[0m[0m script_location = (known after apply)
        }

      [32m+[0m[0m execution_property {
          [32m+[0m[0m max_concurrent_runs = 4
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.geo_job.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-getgeoinfojob"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.geo_job.aws_iam_role.glue_job_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "glue_job_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "glue.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "GlueAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-getgeoinfojob"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-getgeoinfojob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-getgeoinfojob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-getgeoinfojob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-getgeoinfojob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.geo_job.aws_iam_role_policy_attachment.glue[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-getgeoinfojob"
    }

[1m  # module.mainprocess.module.glue_resources.module.geo_job.aws_iam_role_policy_attachment.glue_service_policy_attachement[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue_service_policy_attachement" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-getgeoinfojob"
    }

[1m  # module.mainprocess.module.glue_resources.module.geo_job.aws_s3_object.glue_script[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "glue_script" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "6830257473b9c1c803a6fe71f5ccbeae"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "scripts/getgeoinfojob.py"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/mainprocess/glue/getgeoinfojob/getgeoinfojob.py"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.geosvc_connection.aws_glue_connection.glue_connection[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_connection" "glue_connection" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m catalog_id            = (known after apply)
      [32m+[0m[0m connection_properties = (sensitive value)
      [32m+[0m[0m connection_type       = "NETWORK"
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m name                  = "aue1d1z1glxoidhoidh-geosvcconn"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1glxoidhoidh-geosvcconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-geosvcconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1glxoidhoidh-geosvcconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-geosvcconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }

      [32m+[0m[0m physical_connection_requirements {
          [32m+[0m[0m availability_zone      = "us-east-1a"
          [32m+[0m[0m security_group_id_list = (known after apply)
          [32m+[0m[0m subnet_id              = "subnet-0d27b3488255277ea"
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.geosvc_connection.aws_security_group.conn_sg[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "conn_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "aue1d1z1sgpoidhoidh-geosvcconn"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"         = "aue1d1z1sgpoidhoidh-geosvcconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-geosvcconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"         = "aue1d1z1sgpoidhoidh-geosvcconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-geosvcconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0e2e0a002af0dfdbf"
    }

[1m  # module.mainprocess.module.glue_resources.module.geosvc_connection.aws_vpc_security_group_egress_rule.glue_sg_egress[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_egress_rule" "glue_sg_egress" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m cidr_ipv4              = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_protocol            = "-1"
      [32m+[0m[0m security_group_id      = (known after apply)
      [32m+[0m[0m security_group_rule_id = (known after apply)
      [32m+[0m[0m tags_all               = {}
    }

[1m  # module.mainprocess.module.glue_resources.module.geosvc_connection.aws_vpc_security_group_ingress_rule.glue_sg_ingress[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_ingress_rule" "glue_sg_ingress" {
      [32m+[0m[0m arn                          = (known after apply)
      [32m+[0m[0m id                           = (known after apply)
      [32m+[0m[0m ip_protocol                  = "-1"
      [32m+[0m[0m referenced_security_group_id = (known after apply)
      [32m+[0m[0m security_group_id            = (known after apply)
      [32m+[0m[0m security_group_rule_id       = (known after apply)
      [32m+[0m[0m tags_all                     = {}
    }

[1m  # module.mainprocess.module.glue_resources.module.ind_dedup_job.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Abort*",
                          [32m+[0m[0m "s3:DeleteObject*",
                          [32m+[0m[0m "s3:GetBucket*",
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:List*",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectLegalHold",
                          [32m+[0m[0m "s3:PutObjectRetention",
                          [32m+[0m[0m "s3:PutObjectTagging",
                          [32m+[0m[0m "s3:PutObjectVersionTagging",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_bucket_arn}",
                          [32m+[0m[0m "${data_bucket_arn}/*",
                          [32m+[0m[0m "${glue_bucket_arn}",
                          [32m+[0m[0m "${glue_bucket_arn}/*",
                          [32m+[0m[0m "${artifacts_bucket_arn}",
                          [32m+[0m[0m "${artifacts_bucket_arn}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                          [32m+[0m[0m "${glue_enc_key}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:AssociateKmsKey",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws-glue/jobs/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"                         = "497607366324"
          [32m+[0m[0m "alaya_trigger_key"                  = "consume_data/resultData/executions_1"
          [32m+[0m[0m "artifacts_bucket_arn"               = (known after apply)
          [32m+[0m[0m "artifacts_bucket_id"                = (known after apply)
          [32m+[0m[0m "aurora_backup_retention_period"     = "30"
          [32m+[0m[0m "aurora_jdbc_url"                    = (known after apply)
          [32m+[0m[0m "aurora_max_capacity"                = "4"
          [32m+[0m[0m "aurora_min_capacity"                = "2"
          [32m+[0m[0m "aurora_preferred_backup_window"     = "21:00-00:00"
          [32m+[0m[0m "aurora_subnetid"                    = "subnet-0faa149c05e010222"
          [32m+[0m[0m "cron_schedule"                      = "cron(0 23 * * ? *)"
          [32m+[0m[0m "cron_trigger_enabled"               = "false"
          [32m+[0m[0m "data_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "data_bucket_id"                     = (known after apply)
          [32m+[0m[0m "data_key_arn"                       = (known after apply)
          [32m+[0m[0m "glue_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "glue_bucket_id"                     = (known after apply)
          [32m+[0m[0m "glue_enc_key"                       = (known after apply)
          [32m+[0m[0m "glue_geosvc_subnetid"               = "subnet-0d27b3488255277ea"
          [32m+[0m[0m "lambda_ec_agent_source_table_name"  = "bright_raw_agent_latest"
          [32m+[0m[0m "lambda_ec_agent_target_table_name"  = "bright_staging_agent_latest"
          [32m+[0m[0m "lambda_ec_office_source_table_name" = "bright_raw_office_latest"
          [32m+[0m[0m "lambda_ec_office_target_table_name" = "bright_staging_office_latest"
          [32m+[0m[0m "max_records_per_file"               = "5000"
          [32m+[0m[0m "region"                             = "us-east-1"
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.ind_dedup_job.aws_glue_job.glue_job[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_job" "glue_job" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m connections            = [
          [32m+[0m[0m "aue1d1z1glxoidhoidh-auroraconn",
        ]
      [32m+[0m[0m default_arguments      = (known after apply)
      [32m+[0m[0m glue_version           = "4.0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m max_capacity           = (known after apply)
      [32m+[0m[0m name                   = "aue1d1z1gljoidhoidh-inddedupjob"
      [32m+[0m[0m number_of_workers      = 21
      [32m+[0m[0m role_arn               = (known after apply)
      [32m+[0m[0m security_configuration = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-inddedupjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-inddedupjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-inddedupjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-inddedupjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                = 60
      [32m+[0m[0m worker_type            = "G.1X"

      [32m+[0m[0m command {
          [32m+[0m[0m name            = "glueetl"
          [32m+[0m[0m python_version  = (known after apply)
          [32m+[0m[0m script_location = (known after apply)
        }

      [32m+[0m[0m execution_property {
          [32m+[0m[0m max_concurrent_runs = 1
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.ind_dedup_job.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-inddedupjob"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.ind_dedup_job.aws_iam_role.glue_job_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "glue_job_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "glue.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "GlueAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-inddedupjob"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-inddedupjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-inddedupjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-inddedupjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-inddedupjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.ind_dedup_job.aws_iam_role_policy_attachment.glue[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-inddedupjob"
    }

[1m  # module.mainprocess.module.glue_resources.module.ind_dedup_job.aws_iam_role_policy_attachment.glue_service_policy_attachement[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue_service_policy_attachement" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-inddedupjob"
    }

[1m  # module.mainprocess.module.glue_resources.module.ind_dedup_job.aws_s3_object.glue_script[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "glue_script" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "cef0e681d17362ead0701eadfbf66360"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "scripts/inddedupjob.py"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/mainprocess/glue/inddedupjob/inddedupjob.py"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.ingest_job.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Abort*",
                          [32m+[0m[0m "s3:DeleteObject*",
                          [32m+[0m[0m "s3:GetBucket*",
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:List*",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectLegalHold",
                          [32m+[0m[0m "s3:PutObjectRetention",
                          [32m+[0m[0m "s3:PutObjectTagging",
                          [32m+[0m[0m "s3:PutObjectVersionTagging",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_bucket_arn}",
                          [32m+[0m[0m "${data_bucket_arn}/*",
                          [32m+[0m[0m "${glue_bucket_arn}",
                          [32m+[0m[0m "${glue_bucket_arn}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                          [32m+[0m[0m "${glue_enc_key}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:AssociateKmsKey",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws-glue/jobs/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"                         = "497607366324"
          [32m+[0m[0m "alaya_trigger_key"                  = "consume_data/resultData/executions_1"
          [32m+[0m[0m "artifacts_bucket_arn"               = (known after apply)
          [32m+[0m[0m "artifacts_bucket_id"                = (known after apply)
          [32m+[0m[0m "aurora_backup_retention_period"     = "30"
          [32m+[0m[0m "aurora_jdbc_url"                    = (known after apply)
          [32m+[0m[0m "aurora_max_capacity"                = "4"
          [32m+[0m[0m "aurora_min_capacity"                = "2"
          [32m+[0m[0m "aurora_preferred_backup_window"     = "21:00-00:00"
          [32m+[0m[0m "aurora_subnetid"                    = "subnet-0faa149c05e010222"
          [32m+[0m[0m "cron_schedule"                      = "cron(0 23 * * ? *)"
          [32m+[0m[0m "cron_trigger_enabled"               = "false"
          [32m+[0m[0m "data_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "data_bucket_id"                     = (known after apply)
          [32m+[0m[0m "data_key_arn"                       = (known after apply)
          [32m+[0m[0m "glue_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "glue_bucket_id"                     = (known after apply)
          [32m+[0m[0m "glue_enc_key"                       = (known after apply)
          [32m+[0m[0m "glue_geosvc_subnetid"               = "subnet-0d27b3488255277ea"
          [32m+[0m[0m "lambda_ec_agent_source_table_name"  = "bright_raw_agent_latest"
          [32m+[0m[0m "lambda_ec_agent_target_table_name"  = "bright_staging_agent_latest"
          [32m+[0m[0m "lambda_ec_office_source_table_name" = "bright_raw_office_latest"
          [32m+[0m[0m "lambda_ec_office_target_table_name" = "bright_staging_office_latest"
          [32m+[0m[0m "max_records_per_file"               = "5000"
          [32m+[0m[0m "region"                             = "us-east-1"
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.ingest_job.aws_glue_job.glue_job[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_job" "glue_job" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m connections            = [
          [32m+[0m[0m "aue1d1z1glxoidhoidh-redshiftconn",
        ]
      [32m+[0m[0m default_arguments      = (known after apply)
      [32m+[0m[0m glue_version           = "4.0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m max_capacity           = (known after apply)
      [32m+[0m[0m name                   = "aue1d1z1gljoidhoidh-ingestjob"
      [32m+[0m[0m number_of_workers      = 4
      [32m+[0m[0m role_arn               = (known after apply)
      [32m+[0m[0m security_configuration = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-ingestjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-ingestjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-ingestjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-ingestjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                = 60
      [32m+[0m[0m worker_type            = "G.1X"

      [32m+[0m[0m command {
          [32m+[0m[0m name            = "glueetl"
          [32m+[0m[0m python_version  = (known after apply)
          [32m+[0m[0m script_location = (known after apply)
        }

      [32m+[0m[0m execution_property {
          [32m+[0m[0m max_concurrent_runs = 4
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.ingest_job.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-ingestjob"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.ingest_job.aws_iam_role.glue_job_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "glue_job_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "glue.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "GlueAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-ingestjob"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-ingestjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-ingestjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-ingestjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-ingestjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.ingest_job.aws_iam_role_policy_attachment.glue[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-ingestjob"
    }

[1m  # module.mainprocess.module.glue_resources.module.ingest_job.aws_iam_role_policy_attachment.glue_service_policy_attachement[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue_service_policy_attachement" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-ingestjob"
    }

[1m  # module.mainprocess.module.glue_resources.module.ingest_job.aws_s3_object.glue_script[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "glue_script" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "03406114f2debf3e355bd4ffe5254045"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "scripts/ingestjob.py"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/mainprocess/glue/ingestjob/ingestjob.py"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.org_dedup_job.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Abort*",
                          [32m+[0m[0m "s3:DeleteObject*",
                          [32m+[0m[0m "s3:GetBucket*",
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:List*",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectLegalHold",
                          [32m+[0m[0m "s3:PutObjectRetention",
                          [32m+[0m[0m "s3:PutObjectTagging",
                          [32m+[0m[0m "s3:PutObjectVersionTagging",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_bucket_arn}",
                          [32m+[0m[0m "${data_bucket_arn}/*",
                          [32m+[0m[0m "${glue_bucket_arn}",
                          [32m+[0m[0m "${glue_bucket_arn}/*",
                          [32m+[0m[0m "${artifacts_bucket_arn}",
                          [32m+[0m[0m "${artifacts_bucket_arn}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                          [32m+[0m[0m "${glue_enc_key}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:AssociateKmsKey",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws-glue/jobs/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"                         = "497607366324"
          [32m+[0m[0m "alaya_trigger_key"                  = "consume_data/resultData/executions_1"
          [32m+[0m[0m "artifacts_bucket_arn"               = (known after apply)
          [32m+[0m[0m "artifacts_bucket_id"                = (known after apply)
          [32m+[0m[0m "aurora_backup_retention_period"     = "30"
          [32m+[0m[0m "aurora_jdbc_url"                    = (known after apply)
          [32m+[0m[0m "aurora_max_capacity"                = "4"
          [32m+[0m[0m "aurora_min_capacity"                = "2"
          [32m+[0m[0m "aurora_preferred_backup_window"     = "21:00-00:00"
          [32m+[0m[0m "aurora_subnetid"                    = "subnet-0faa149c05e010222"
          [32m+[0m[0m "cron_schedule"                      = "cron(0 23 * * ? *)"
          [32m+[0m[0m "cron_trigger_enabled"               = "false"
          [32m+[0m[0m "data_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "data_bucket_id"                     = (known after apply)
          [32m+[0m[0m "data_key_arn"                       = (known after apply)
          [32m+[0m[0m "glue_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "glue_bucket_id"                     = (known after apply)
          [32m+[0m[0m "glue_enc_key"                       = (known after apply)
          [32m+[0m[0m "glue_geosvc_subnetid"               = "subnet-0d27b3488255277ea"
          [32m+[0m[0m "lambda_ec_agent_source_table_name"  = "bright_raw_agent_latest"
          [32m+[0m[0m "lambda_ec_agent_target_table_name"  = "bright_staging_agent_latest"
          [32m+[0m[0m "lambda_ec_office_source_table_name" = "bright_raw_office_latest"
          [32m+[0m[0m "lambda_ec_office_target_table_name" = "bright_staging_office_latest"
          [32m+[0m[0m "max_records_per_file"               = "5000"
          [32m+[0m[0m "region"                             = "us-east-1"
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.org_dedup_job.aws_glue_job.glue_job[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_job" "glue_job" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m connections            = [
          [32m+[0m[0m "aue1d1z1glxoidhoidh-auroraconn",
        ]
      [32m+[0m[0m default_arguments      = (known after apply)
      [32m+[0m[0m glue_version           = "4.0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m max_capacity           = (known after apply)
      [32m+[0m[0m name                   = "aue1d1z1gljoidhoidh-orgdedupjob"
      [32m+[0m[0m number_of_workers      = 31
      [32m+[0m[0m role_arn               = (known after apply)
      [32m+[0m[0m security_configuration = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-orgdedupjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-orgdedupjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"         = "aue1d1z1gljoidhoidh-orgdedupjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-orgdedupjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                = 60
      [32m+[0m[0m worker_type            = "G.1X"

      [32m+[0m[0m command {
          [32m+[0m[0m name            = "glueetl"
          [32m+[0m[0m python_version  = (known after apply)
          [32m+[0m[0m script_location = (known after apply)
        }

      [32m+[0m[0m execution_property {
          [32m+[0m[0m max_concurrent_runs = 1
        }
    }

[1m  # module.mainprocess.module.glue_resources.module.org_dedup_job.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-orgdedupjob"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.org_dedup_job.aws_iam_role.glue_job_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "glue_job_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "glue.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "GlueAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-orgdedupjob"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-orgdedupjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-orgdedupjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-orgdedupjob"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-orgdedupjob"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.org_dedup_job.aws_iam_role_policy_attachment.glue[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-orgdedupjob"
    }

[1m  # module.mainprocess.module.glue_resources.module.org_dedup_job.aws_iam_role_policy_attachment.glue_service_policy_attachement[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "glue_service_policy_attachement" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-orgdedupjob"
    }

[1m  # module.mainprocess.module.glue_resources.module.org_dedup_job.aws_s3_object.glue_script[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "glue_script" {
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = true
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "a318a2ca21da2e35896939e2eb21a0d2"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "scripts/orgdedupjob.py"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = "AES256"
      [32m+[0m[0m source                 = "../src/mainprocess/glue/orgdedupjob/orgdedupjob.py"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.mainprocess.module.glue_resources.module.redshift_connection.aws_glue_connection.glue_connection[0m will be created
[0m  [32m+[0m[0m resource "aws_glue_connection" "glue_connection" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m catalog_id            = (known after apply)
      [32m+[0m[0m connection_properties = (sensitive value)
      [32m+[0m[0m connection_type       = "JDBC"
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m name                  = "aue1d1z1glxoidhoidh-redshiftconn"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1glxoidhoidh-redshiftconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-redshiftconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1glxoidhoidh-redshiftconn"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-redshiftconn"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }

      [32m+[0m[0m physical_connection_requirements {
          [32m+[0m[0m availability_zone      = "us-east-1a"
          [32m+[0m[0m security_group_id_list = (sensitive value)
          [32m+[0m[0m subnet_id              = (sensitive value)
        }
    }

[1m  # module.mainprocess.module.lambda_resources.module.lambda_config_loader.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetBucket*",
                          [32m+[0m[0m "s3:GetObject*",
                          [32m+[0m[0m "s3:List*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${artifacts_bucket_arn}",
                          [32m+[0m[0m "${artifacts_bucket_arn}/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:/aws/lambda/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"                         = "497607366324"
          [32m+[0m[0m "alaya_trigger_key"                  = "consume_data/resultData/executions_1"
          [32m+[0m[0m "artifacts_bucket_arn"               = (known after apply)
          [32m+[0m[0m "artifacts_bucket_id"                = (known after apply)
          [32m+[0m[0m "aurora_backup_retention_period"     = "30"
          [32m+[0m[0m "aurora_max_capacity"                = "4"
          [32m+[0m[0m "aurora_min_capacity"                = "2"
          [32m+[0m[0m "aurora_preferred_backup_window"     = "21:00-00:00"
          [32m+[0m[0m "cron_schedule"                      = "cron(0 23 * * ? *)"
          [32m+[0m[0m "cron_trigger_enabled"               = "false"
          [32m+[0m[0m "data_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "data_bucket_id"                     = (known after apply)
          [32m+[0m[0m "data_key_arn"                       = (known after apply)
          [32m+[0m[0m "glue_bucket_arn"                    = (known after apply)
          [32m+[0m[0m "glue_bucket_id"                     = (known after apply)
          [32m+[0m[0m "glue_enc_key"                       = (known after apply)
          [32m+[0m[0m "glue_geosvc_subnetid"               = "subnet-0d27b3488255277ea"
          [32m+[0m[0m "gluedb_name"                        = "aue1d1z1gldoidhoidh_oidhdb"
          [32m+[0m[0m "lambda_ec_agent_source_table_name"  = "bright_raw_agent_latest"
          [32m+[0m[0m "lambda_ec_agent_target_table_name"  = "bright_staging_agent_latest"
          [32m+[0m[0m "lambda_ec_office_source_table_name" = "bright_raw_office_latest"
          [32m+[0m[0m "lambda_ec_office_target_table_name" = "bright_staging_office_latest"
          [32m+[0m[0m "lambda_name"                        = "aue1d1z1lmboidhoidh-configloader"
          [32m+[0m[0m "max_records_per_file"               = "5000"
          [32m+[0m[0m "region"                             = "us-east-1"
        }
    }

[1m  # module.mainprocess.module.lambda_resources.module.lambda_config_loader.aws_cloudwatch_log_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/aue1d1z1lmboidhoidh-configloader"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-configloader"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-configloader"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"         = "aue1d1z1cwgoidhoidh-configloader"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-configloader"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.mainprocess.module.lambda_resources.module.lambda_config_loader.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-configloader"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.mainprocess.module.lambda_resources.module.lambda_config_loader.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-configloader"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-configloader"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-configloader"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-configloader"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-configloader"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.mainprocess.module.lambda_resources.module.lambda_config_loader.aws_iam_role_policy_attachment.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-configloader"
    }

[1m  # module.mainprocess.module.lambda_resources.module.lambda_config_loader.aws_lambda_function.executor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "executor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "configloader"
      [32m+[0m[0m filename                       = "../src/mainprocess/lambda/configloader.zip"
      [32m+[0m[0m function_name                  = "aue1d1z1lmboidhoidh-configloader"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.10"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "Sf0BXQM8V1Vsu38EUXU1QG+G3gW1i+LIqt7VNu4LK8A="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-configloader"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-configloader"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Name"         = "aue1d1z1lmboidhoidh-configloader"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-configloader"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }
    }

[1m  # module.mainprocess.module.stepfunction.module.stepfunction.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "lambda:InvokeFunction",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${config_loader_lambda}",
                          [32m+[0m[0m "${config_loader_lambda}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "glue:BatchStopJobRun",
                          [32m+[0m[0m "glue:GetJobRun",
                          [32m+[0m[0m "glue:GetJobRuns",
                          [32m+[0m[0m "glue:StartJobRun",
                          [32m+[0m[0m "glue:StartCrawler",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:glue:${region}:${account_id}:job/${glue_ingest_job}",
                          [32m+[0m[0m "arn:aws:glue:${region}:${account_id}:job/${glue_cleaning_job}",
                          [32m+[0m[0m "arn:aws:glue:${region}:${account_id}:job/${glue_ind_dedup_job}",
                          [32m+[0m[0m "arn:aws:glue:${region}:${account_id}:job/${glue_org_dedup_job}",
                          [32m+[0m[0m "arn:aws:glue:${region}:${account_id}:job/${glue_geoinfo_job}",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"           = "497607366324"
          [32m+[0m[0m "config_loader_lambda" = (known after apply)
          [32m+[0m[0m "data_key_arn"         = (known after apply)
          [32m+[0m[0m "glue_cleaning_job"    = (known after apply)
          [32m+[0m[0m "glue_geoinfo_job"     = (known after apply)
          [32m+[0m[0m "glue_ind_dedup_job"   = (known after apply)
          [32m+[0m[0m "glue_ingest_job"      = (known after apply)
          [32m+[0m[0m "glue_org_dedup_job"   = (known after apply)
          [32m+[0m[0m "region"               = "us-east-1"
          [32m+[0m[0m "sfn_name"             = "aue1d1z1stmoidhoidh-mainprocess"
        }
    }

[1m  # module.mainprocess.module.stepfunction.module.stepfunction.data.template_file.sfn_definition[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "sfn_definition" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m StartAt = "load-ingest-conf"
              [32m+[0m[0m States  = {
                  [32m+[0m[0m FailedState        = {
                      [32m+[0m[0m Cause = "Level_Error"
                      [32m+[0m[0m Error = "Level_Error"
                      [32m+[0m[0m Type  = "Fail"
                    }
                  [32m+[0m[0m cleaning-job       = {
                      [32m+[0m[0m Catch      = [
                          [32m+[0m[0m {
                              [32m+[0m[0m ErrorEquals = [
                                  [32m+[0m[0m "States.ALL",
                                ]
                              [32m+[0m[0m Next        = "FailedState"
                            },
                        ]
                      [32m+[0m[0m Next       = "deduplication-jobs"
                      [32m+[0m[0m Parameters = {
                          [32m+[0m[0m JobName              = "${glue_cleaning_job}"
                          [32m+[0m[0m NotificationProperty = {
                              [32m+[0m[0m NotifyDelayAfter = 5
                            }
                          [32m+[0m[0m Timeout              = 120
                        }
                      [32m+[0m[0m Resource   = "arn:aws:states:::glue:startJobRun.sync"
                      [32m+[0m[0m Retry      = [
                          [32m+[0m[0m {
                              [32m+[0m[0m BackoffRate     = 2
                              [32m+[0m[0m ErrorEquals     = [
                                  [32m+[0m[0m "States.ALL",
                                ]
                              [32m+[0m[0m IntervalSeconds = 2
                              [32m+[0m[0m MaxAttempts     = 3
                            },
                        ]
                      [32m+[0m[0m Type       = "Task"
                    }
                  [32m+[0m[0m deduplication-jobs = {
                      [32m+[0m[0m Branches = [
                          [32m+[0m[0m {
                              [32m+[0m[0m StartAt = "individuals"
                              [32m+[0m[0m States  = {
                                  [32m+[0m[0m individuals = {
                                      [32m+[0m[0m End        = true
                                      [32m+[0m[0m Parameters = {
                                          [32m+[0m[0m JobName              = "${glue_ind_dedup_job}"
                                          [32m+[0m[0m NotificationProperty = {
                                              [32m+[0m[0m NotifyDelayAfter = 5
                                            }
                                          [32m+[0m[0m Timeout              = 120
                                        }
                                      [32m+[0m[0m Resource   = "arn:aws:states:::glue:startJobRun.sync"
                                      [32m+[0m[0m Retry      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m BackoffRate     = 2
                                              [32m+[0m[0m ErrorEquals     = [
                                                  [32m+[0m[0m "States.ALL",
                                                ]
                                              [32m+[0m[0m IntervalSeconds = 2
                                              [32m+[0m[0m MaxAttempts     = 1
                                            },
                                        ]
                                      [32m+[0m[0m Type       = "Task"
                                    }
                                }
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m StartAt = "organizations"
                              [32m+[0m[0m States  = {
                                  [32m+[0m[0m organizations = {
                                      [32m+[0m[0m End        = true
                                      [32m+[0m[0m Parameters = {
                                          [32m+[0m[0m JobName              = "${glue_org_dedup_job}"
                                          [32m+[0m[0m NotificationProperty = {
                                              [32m+[0m[0m NotifyDelayAfter = 5
                                            }
                                          [32m+[0m[0m Timeout              = 120
                                        }
                                      [32m+[0m[0m Resource   = "arn:aws:states:::glue:startJobRun.sync"
                                      [32m+[0m[0m Retry      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m BackoffRate     = 2
                                              [32m+[0m[0m ErrorEquals     = [
                                                  [32m+[0m[0m "States.ALL",
                                                ]
                                              [32m+[0m[0m IntervalSeconds = 2
                                              [32m+[0m[0m MaxAttempts     = 1
                                            },
                                        ]
                                      [32m+[0m[0m Type       = "Task"
                                    }
                                }
                            },
                        ]
                      [32m+[0m[0m Catch    = [
                          [32m+[0m[0m {
                              [32m+[0m[0m ErrorEquals = [
                                  [32m+[0m[0m "States.ALL",
                                ]
                              [32m+[0m[0m Next        = "FailedState"
                            },
                        ]
                      [32m+[0m[0m End      = true
                      [32m+[0m[0m Type     = "Parallel"
                    }
                  [32m+[0m[0m geoinfo-mapping    = {
                      [32m+[0m[0m Catch          = [
                          [32m+[0m[0m {
                              [32m+[0m[0m ErrorEquals = [
                                  [32m+[0m[0m "States.ALL",
                                ]
                              [32m+[0m[0m Next        = "FailedState"
                            },
                        ]
                      [32m+[0m[0m ItemsPath      = "$.tables"
                      [32m+[0m[0m Iterator       = {
                          [32m+[0m[0m StartAt = "choice-status"
                          [32m+[0m[0m States  = {
                              [32m+[0m[0m Pass          = {
                                  [32m+[0m[0m End  = true
                                  [32m+[0m[0m Type = "Pass"
                                }
                              [32m+[0m[0m choice-status = {
                                  [32m+[0m[0m Choices = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m BooleanEquals = true
                                          [32m+[0m[0m Next          = "geoinfo-job"
                                          [32m+[0m[0m Variable      = "$.getgeoinfo"
                                        },
                                    ]
                                  [32m+[0m[0m Default = "Pass"
                                  [32m+[0m[0m Type    = "Choice"
                                }
                              [32m+[0m[0m geoinfo-job   = {
                                  [32m+[0m[0m End        = true
                                  [32m+[0m[0m Parameters = {
                                      [32m+[0m[0m Arguments            = {
                                          [32m+[0m[0m "--database.$" = "$.catalog_database"
                                          [32m+[0m[0m "--options.$"  = "$.options"
                                          [32m+[0m[0m "--table.$"    = "$.catalog_table"
                                        }
                                      [32m+[0m[0m JobName              = "${glue_geoinfo_job}"
                                      [32m+[0m[0m NotificationProperty = {
                                          [32m+[0m[0m NotifyDelayAfter = 5
                                        }
                                      [32m+[0m[0m Timeout              = 120
                                    }
                                  [32m+[0m[0m Resource   = "arn:aws:states:::glue:startJobRun.sync"
                                  [32m+[0m[0m Retry      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m BackoffRate     = 2
                                          [32m+[0m[0m ErrorEquals     = [
                                              [32m+[0m[0m "States.ALL",
                                            ]
                                          [32m+[0m[0m IntervalSeconds = 2
                                          [32m+[0m[0m MaxAttempts     = 3
                                        },
                                    ]
                                  [32m+[0m[0m Type       = "Task"
                                }
                            }
                        }
                      [32m+[0m[0m MaxConcurrency = 4
                      [32m+[0m[0m Next           = "cleaning-job"
                      [32m+[0m[0m ResultPath     = [90mnull[0m[0m
                      [32m+[0m[0m Type           = "Map"
                    }
                  [32m+[0m[0m ingest-job-mapping = {
                      [32m+[0m[0m Catch          = [
                          [32m+[0m[0m {
                              [32m+[0m[0m ErrorEquals = [
                                  [32m+[0m[0m "States.ALL",
                                ]
                              [32m+[0m[0m Next        = "FailedState"
                            },
                        ]
                      [32m+[0m[0m ItemsPath      = "$.tables"
                      [32m+[0m[0m Iterator       = {
                          [32m+[0m[0m StartAt = "ingest-job"
                          [32m+[0m[0m States  = {
                              [32m+[0m[0m ingest-job = {
                                  [32m+[0m[0m End        = true
                                  [32m+[0m[0m Parameters = {
                                      [32m+[0m[0m Arguments            = {
                                          [32m+[0m[0m "--catalog_database.$" = "$.catalog_database"
                                          [32m+[0m[0m "--catalog_table.$"    = "$.catalog_table"
                                          [32m+[0m[0m "--connection_type.$"  = "$.connection_type"
                                          [32m+[0m[0m "--options.$"          = "$.options"
                                          [32m+[0m[0m "--target.$"           = "$.target"
                                          [32m+[0m[0m "--target_prefixes.$"  = "$.target_prefixes"
                                        }
                                      [32m+[0m[0m JobName              = "${glue_ingest_job}"
                                      [32m+[0m[0m NotificationProperty = {
                                          [32m+[0m[0m NotifyDelayAfter = 5
                                        }
                                      [32m+[0m[0m Timeout              = 120
                                    }
                                  [32m+[0m[0m Resource   = "arn:aws:states:::glue:startJobRun.sync"
                                  [32m+[0m[0m Retry      = [
                                      [32m+[0m[0m {
                                          [32m+[0m[0m BackoffRate     = 2
                                          [32m+[0m[0m ErrorEquals     = [
                                              [32m+[0m[0m "States.ALL",
                                            ]
                                          [32m+[0m[0m IntervalSeconds = 2
                                          [32m+[0m[0m MaxAttempts     = 3
                                        },
                                    ]
                                  [32m+[0m[0m Type       = "Task"
                                }
                            }
                        }
                      [32m+[0m[0m MaxConcurrency = 4
                      [32m+[0m[0m Next           = "geoinfo-mapping"
                      [32m+[0m[0m ResultPath     = [90mnull[0m[0m
                      [32m+[0m[0m Type           = "Map"
                    }
                  [32m+[0m[0m load-ingest-conf   = {
                      [32m+[0m[0m Catch      = [
                          [32m+[0m[0m {
                              [32m+[0m[0m ErrorEquals = [
                                  [32m+[0m[0m "States.ALL",
                                ]
                              [32m+[0m[0m Next        = "FailedState"
                            },
                        ]
                      [32m+[0m[0m Next       = "ingest-job-mapping"
                      [32m+[0m[0m OutputPath = "$.Payload"
                      [32m+[0m[0m Parameters = {
                          [32m+[0m[0m FunctionName = "${config_loader_lambda}"
                          [32m+[0m[0m "Payload.$"  = "$"
                        }
                      [32m+[0m[0m Resource   = "arn:aws:states:::lambda:invoke"
                      [32m+[0m[0m Retry      = [
                          [32m+[0m[0m {
                              [32m+[0m[0m BackoffRate     = 2
                              [32m+[0m[0m ErrorEquals     = [
                                  [32m+[0m[0m "Lambda.ClientExecutionTimeoutException",
                                  [32m+[0m[0m "Lambda.ServiceException",
                                  [32m+[0m[0m "Lambda.AWSLambdaException",
                                  [32m+[0m[0m "Lambda.SdkClientException",
                                ]
                              [32m+[0m[0m IntervalSeconds = 0
                              [32m+[0m[0m MaxAttempts     = 2
                            },
                        ]
                      [32m+[0m[0m Type       = "Task"
                    }
                }
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "config_loader_lambda" = (known after apply)
          [32m+[0m[0m "data_key_arn"         = (known after apply)
          [32m+[0m[0m "glue_cleaning_job"    = (known after apply)
          [32m+[0m[0m "glue_geoinfo_job"     = (known after apply)
          [32m+[0m[0m "glue_ind_dedup_job"   = (known after apply)
          [32m+[0m[0m "glue_ingest_job"      = (known after apply)
          [32m+[0m[0m "glue_org_dedup_job"   = (known after apply)
        }
    }

[1m  # module.mainprocess.module.stepfunction.module.stepfunction.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-mainprocess"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Name"         = "aue1d1z1iploidhoidh-mainprocess"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-mainprocess"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Name"         = "aue1d1z1iploidhoidh-mainprocess"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-mainprocess"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
    }

[1m  # module.mainprocess.module.stepfunction.module.stepfunction.aws_iam_role.sfn[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "sfn" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:SourceAccount" = "497607366324"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "states.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aue1d1z1irooidhoidh-mainprocess"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-mainprocess"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-mainprocess"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name"         = "aue1d1z1irooidhoidh-mainprocess"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-mainprocess"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.mainprocess.module.stepfunction.module.stepfunction.aws_iam_role_policy_attachment.sfn[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "sfn" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-mainprocess"
    }

[1m  # module.mainprocess.module.stepfunction.module.stepfunction.aws_sfn_state_machine.sfn[0m will be created
[0m  [32m+[0m[0m resource "aws_sfn_state_machine" "sfn" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m creation_date             = (known after apply)
      [32m+[0m[0m definition                = (known after apply)
      [32m+[0m[0m description               = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m name                      = "aue1d1z1stmoidhoidh-mainprocess"
      [32m+[0m[0m name_prefix               = (known after apply)
      [32m+[0m[0m publish                   = false
      [32m+[0m[0m revision_id               = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m state_machine_version_arn = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Name"         = "aue1d1z1stmoidhoidh-mainprocess"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-mainprocess"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Name"         = "aue1d1z1stmoidhoidh-mainprocess"
          [32m+[0m[0m "app"          = "oidh"
          [32m+[0m[0m "creation_app" = "terraform"
          [32m+[0m[0m "env"          = "d1"
          [32m+[0m[0m "ledger"       = "oidh"
          [32m+[0m[0m "purpose"      = "oidh-mainprocess"
          [32m+[0m[0m "site"         = "aue1"
          [32m+[0m[0m "tier"         = "oidh"
          [32m+[0m[0m "zone"         = "z1"
        }
      [32m+[0m[0m type                      = "STANDARD"
      [32m+[0m[0m version_description       = (known after apply)
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.module.policies_creation.data.template_file.policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "template_file" "policy" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m rendered = (known after apply)
      [32m+[0m[0m template = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:GetBucketAcl",
                          [32m+[0m[0m "s3:ListBucket",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectAcl",
                          [32m+[0m[0m "s3:DeleteObject",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}/*",
                          [32m+[0m[0m "arn:aws:s3:::${bucket_id}",
                          [32m+[0m[0m "arn:aws:s3:::${athena_bucket_id}/*",
                          [32m+[0m[0m "arn:aws:s3:::${athena_bucket_id}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetBucketLocation",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "glue:GetTable",
                          [32m+[0m[0m "glue:BatchCreatePartition",
                          [32m+[0m[0m "glue:UpdateTable",
                          [32m+[0m[0m "glue:CreateTable",
                          [32m+[0m[0m "glue:GetPartitions",
                          [32m+[0m[0m "glue:GetPartition",
                          [32m+[0m[0m "glue:GetDatabases",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:glue:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:${region}:${account_id}:log-group:*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "events:PutEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:events:${region}:${account_id}:event-bus/default",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:GetRecords",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/${dynamo_table_register}",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:DescribeTable",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:${region}:${account_id}:table/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "athena:StartQueryExecution",
                          [32m+[0m[0m "athena:GetQueryExecution",
                          [32m+[0m[0m "athena:GetQueryResults",
                          [32m+[0m[0m "athena:GetQueryResultsStream",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:athena:${region}:${account_id}:workgroup/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:CreateGrant",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "${data_key_arn}",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m vars     = {
          [32m+[0m[0m "account_id"            = "497607366324"
          [32m+[0m[0m "alayasyncdb"           = "aue1d1z1gldoidhoidh_alayasync"
          [32m+[0m[0m "alayasyncdb_path"      = (known after apply)
          [32m+[0m[0m "alayatrigger_key"      = "consume_data/resultData/executions_1"
          [32m+[0m[0m "athena_bucket_id"      = (known after apply)
          [32m+[0m[0m "bucket_arn"            = (known after apply)
          [32m+[0m[0m "bucket_id"             = (known after apply)
          [32m+[0m[0m "concurrent_tasks"      = "18"
          [32m+[0m[0m "data_key_arn"          = (known after apply)
          [32m+[0m[0m "data_key_id"           = (known after apply)
          [32m+[0m[0m "dynamo_table_register" = "aue1d1z1dytoidhoidh-alayasync"
          [32m+[0m[0m "ecs_cluster"           = (sensitive value)
          [32m+[0m[0m "ecs_subnets"           = "subnet-0112c4c44ce9649c2"
          [32m+[0m[0m "ecs_task_alaya_cpu"    = "1024"
          [32m+[0m[0m "ecs_task_alaya_memory" = "2048"
          [32m+[0m[0m "region"                = "us-east-1"
          [32m+[0m[0m "sfn_alaya_sync"        = (known after apply)
        }
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.module.policies_creation.aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "aue1d1z1iploidhoidh-alayapush"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.alayasync.module.ecs.module.ecs_alaya_sync.module.policies_creation.aws_iam_role_policy_attachment.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aue1d1z1irooidhoidh-alayapush"
    }

[1mPlan:[0m 157 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
